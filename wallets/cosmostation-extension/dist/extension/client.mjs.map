{"version":3,"sources":["../../src/extension/client.ts"],"sourcesContent":["import { chainRegistryChainToCosmostation } from '@chain-registry/cosmostation';\nimport { StdSignDoc, StdSignature } from '@cosmjs/amino';\nimport { OfflineDirectSigner } from '@cosmjs/proto-signing';\nimport {\n  BroadcastMode,\n  ChainRecord,\n  DirectSignDoc,\n  ExtendedHttpEndpoint,\n  SignOptions,\n  SignType,\n  SuggestToken,\n  WalletClient,\n} from '@cosmos-kit/core';\n\nimport { Cosmostation, RequestAccountResponse } from './types';\n\nexport class CosmostationClient implements WalletClient {\n  readonly client: Cosmostation;\n  private eventMap: Map<\n    string,\n    Map<EventListenerOrEventListenerObject, Event>\n  > = new Map();\n\n  constructor(client: Cosmostation) {\n    this.client = client;\n  }\n\n  get cosmos() {\n    return this.client.cosmos;\n  }\n\n  get ikeplr() {\n    return this.client.providers.keplr;\n  }\n\n  async suggestToken({ chainName, tokens, type }: SuggestToken) {\n    if (type === 'cw20') {\n      await this.cosmos.request({\n        method: \"cos_addTokensCW20\",\n        params: {\n          chainName,\n          tokens\n        },\n      });\n    }\n  };\n\n  async getSimpleAccount(chainId: string) {\n    const { address, username } = await this.getAccount(chainId);\n    return {\n      namespace: 'cosmos',\n      chainId,\n      address,\n      username,\n    };\n  }\n\n  async getAccount(chainId: string) {\n    const key = (await this.cosmos.request({\n      method: 'cos_requestAccount',\n      params: { chainName: chainId },\n    })) as RequestAccountResponse;\n    return {\n      username: key.name,\n      address: key.address,\n      pubkey: key.publicKey,\n      algo: key.algo,\n    };\n  }\n\n  async disconnect() {\n    await this.cosmos.request({\n      method: 'cos_disconnect',\n    });\n  }\n\n  on(type: string, listener: EventListenerOrEventListenerObject): void {\n    const event = this.cosmos.on(type, listener);\n    const typeEventMap: Map<EventListenerOrEventListenerObject, Event> =\n      this.eventMap.get(type) || new Map();\n    typeEventMap.set(listener, event);\n    this.eventMap.set(type, typeEventMap);\n  }\n\n  off(type: string, listener: EventListenerOrEventListenerObject): void {\n    const event = this.eventMap.get(type)?.get(listener);\n    if (event) {\n      this.cosmos.off(event);\n    }\n  }\n\n  getOfflineSigner(chainId: string, preferredSignType?: SignType) {\n    switch (preferredSignType) {\n      case 'amino':\n        return this.getOfflineSignerAmino(chainId);\n      case 'direct':\n        return this.getOfflineSignerDirect(chainId);\n      default:\n        return this.getOfflineSignerAmino(chainId);\n    }\n    // return this.ikeplr.getOfflineSignerAuto(chainId);\n  }\n\n  getOfflineSignerAmino(chainId: string) {\n    return this.ikeplr.getOfflineSignerOnlyAmino(chainId);\n  }\n\n  getOfflineSignerDirect(chainId: string) {\n    return this.ikeplr.getOfflineSigner(chainId) as OfflineDirectSigner;\n  }\n\n  async addChain(chainInfo: ChainRecord) {\n    const suggestChain = chainRegistryChainToCosmostation(\n      chainInfo.chain,\n      chainInfo.assetList ? [chainInfo.assetList] : []\n    );\n    if (chainInfo.preferredEndpoints?.rest?.[0]) {\n      (suggestChain.restURL as\n        | string\n        | ExtendedHttpEndpoint) = chainInfo.preferredEndpoints?.rest?.[0];\n    }\n    const result = (await this.cosmos.request({\n      method: 'cos_addChain',\n      params: suggestChain,\n    })) as boolean;\n\n    if (!result) {\n      throw new Error(`Failed to add chain ${chainInfo.name}.`);\n    }\n  }\n\n  async signAmino(\n    chainId: string,\n    signer: string,\n    signDoc: StdSignDoc,\n    signOptions?: SignOptions\n  ) {\n    try {\n      return await this.ikeplr.signAmino(chainId, signer, signDoc, signOptions);\n    } catch (error) {\n      return await this.cosmos.request({\n        method: 'cos_signAmino',\n        params: {\n          chainName: chainId,\n          doc: signDoc,\n          isEditMemo: signOptions?.preferNoSetMemo,\n          isEditFee: signOptions?.preferNoSetFee,\n        },\n      });\n    }\n  }\n\n  async signDirect(\n    chainId: string,\n    signer: string,\n    signDoc: DirectSignDoc,\n    signOptions?: SignOptions\n  ) {\n    try {\n      return await this.ikeplr.signDirect(\n        chainId,\n        signer,\n        signDoc,\n        signOptions\n      );\n    } catch (error) {\n      return await this.cosmos.request({\n        method: 'cos_signDirect',\n        params: {\n          chainName: chainId,\n          doc: signDoc,\n          isEditMemo: signOptions?.preferNoSetMemo,\n          isEditFee: signOptions?.preferNoSetFee,\n        },\n      });\n    }\n  }\n\n  async signArbitrary(\n    chainId: string,\n    signer: string,\n    data: string | Uint8Array\n  ): Promise<StdSignature> {\n    try {\n      return await this.ikeplr.signArbitrary(chainId, signer, data);\n    } catch (error) {\n      // https://github.com/cosmostation/cosmostation-chrome-extension-client/blob/main/src/cosmos.ts#LL70C17-L70C28\n      const message = typeof data === 'string' ? data : new TextDecoder('utf-8').decode(data)\n      return await this.cosmos.request({\n        method: 'cos_signMessage',\n        params: {\n          chainName: chainId,\n          signer,\n          message\n        }\n      });\n    }\n  }\n\n  async sendTx(chainId: string, tx: Uint8Array, mode: BroadcastMode) {\n    return await this.ikeplr.sendTx(chainId, tx, mode);\n  }\n}\n"],"mappings":"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","names":[]}