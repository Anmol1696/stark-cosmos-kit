{"version":3,"sources":["../../src/wallet-connect/main-wallet.ts","../../src/wallet-connect/chain-wallet.ts","../../src/wallet-connect/client.ts"],"sourcesContent":["import { EndpointOptions, Wallet } from '@cosmos-kit/core';\nimport { WCWallet } from '@cosmos-kit/walletconnect';\n\nimport { ChainTrustMobile } from './chain-wallet';\nimport { TrustClient } from './client';\n\nexport class TrustMobileWallet extends WCWallet {\n  constructor(\n    walletInfo: Wallet,\n    preferredEndpoints?: EndpointOptions['endpoints']\n  ) {\n    super(walletInfo, ChainTrustMobile, TrustClient);\n    this.preferredEndpoints = preferredEndpoints;\n  }\n}\n","import { ChainRecord, Wallet } from '@cosmos-kit/core';\nimport { ChainWC } from '@cosmos-kit/walletconnect';\nimport { TrustClient } from './client';\n\nexport class ChainTrustMobile extends ChainWC {\n  constructor(walletInfo: Wallet, chainInfo: ChainRecord) {\n    super(walletInfo, chainInfo, TrustClient);\n  }\n}\n","import { DirectSignDoc, SignOptions, Wallet } from '@cosmos-kit/core';\nimport { WCClient } from '@cosmos-kit/walletconnect';\nimport { AminoSignResponse, StdSignDoc } from '@cosmjs/amino';\nimport { DirectSignResponse } from '@cosmjs/proto-signing';\n\nexport class TrustClient extends WCClient {\n  constructor(walletInfo: Wallet) {\n    super(walletInfo);\n  }\n\n  getOfflineSignerAmino = void 0;\n\n  async signAmino(\n    chainId: string,\n    signer: string,\n    signDoc: StdSignDoc,\n    signOptions?: SignOptions\n  ): Promise<AminoSignResponse> {\n    throw new Error(\"Trust doesn't support `signAmino` method.\");\n  }\n\n  async signDirect(\n    chainId: string,\n    signer: string,\n    signDoc: DirectSignDoc,\n    signOptions?: SignOptions\n  ): Promise<DirectSignResponse> {\n    // Trust doesn't return signed, using signDoc instead\n    const result = (await this._signDirect(\n      chainId,\n      signer,\n      signDoc,\n      signOptions\n    )) as any;\n    return {\n      signed: signDoc as DirectSignResponse['signed'],\n      signature: result,\n    };\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,IAAAA,wBAAyB;;;ACAzB,IAAAC,wBAAwB;;;ACAxB,2BAAyB;AAIlB,IAAM,cAAN,cAA0B,8BAAS;AAAA,EACxC,YAAY,YAAoB;AAC9B,UAAM,UAAU;AAGlB,iCAAwB;AAAA,EAFxB;AAAA,EAIA,MAAM,UACJ,SACA,QACA,SACA,aAC4B;AAC5B,UAAM,IAAI,MAAM,2CAA2C;AAAA,EAC7D;AAAA,EAEA,MAAM,WACJ,SACA,QACA,SACA,aAC6B;AAE7B,UAAM,SAAU,MAAM,KAAK;AAAA,MACzB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AACA,WAAO;AAAA,MACL,QAAQ;AAAA,MACR,WAAW;AAAA,IACb;AAAA,EACF;AACF;;;ADnCO,IAAM,mBAAN,cAA+B,8BAAQ;AAAA,EAC5C,YAAY,YAAoB,WAAwB;AACtD,UAAM,YAAY,WAAW,WAAW;AAAA,EAC1C;AACF;;;ADFO,IAAM,oBAAN,cAAgC,+BAAS;AAAA,EAC9C,YACE,YACA,oBACA;AACA,UAAM,YAAY,kBAAkB,WAAW;AAC/C,SAAK,qBAAqB;AAAA,EAC5B;AACF;","names":["import_walletconnect","import_walletconnect"]}