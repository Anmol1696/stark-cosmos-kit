{"version":3,"sources":["../../src/extension/client.ts"],"sourcesContent":["import { StdSignature, StdSignDoc } from '@cosmjs/amino';\nimport { Algo, OfflineDirectSigner } from '@cosmjs/proto-signing';\nimport {\n  BroadcastMode,\n  ChainRecord,\n  ExtendedHttpEndpoint,\n  SignType,\n  SuggestToken,\n} from '@cosmos-kit/core';\nimport { DirectSignDoc, SignOptions, WalletClient } from '@cosmos-kit/core';\nimport { chainRegistryChainToKeplr } from '@chain-registry/keplr';\n\nimport { Compass } from './types';\n\nexport class CompassClient implements WalletClient {\n  readonly client: Compass;\n\n  constructor(client: Compass) {\n    this.client = client;\n  }\n\n  async enable(chainIds: string | string[]) {\n    await this.client.enable(chainIds);\n  }\n\n  async suggestToken({ chainId, tokens, type }: SuggestToken) {\n    if (type === 'cw20') {\n      for (const { contractAddress } of tokens) {\n        await this.client.suggestToken(chainId, contractAddress);\n      }\n    }\n  }\n\n  async addChain(chainInfo: ChainRecord) {\n    const suggestChain = chainRegistryChainToKeplr(\n      chainInfo.chain,\n      chainInfo.assetList ? [chainInfo.assetList] : []\n    );\n\n    if (chainInfo.preferredEndpoints?.rest?.[0]) {\n      (suggestChain.rest as\n        | string\n        | ExtendedHttpEndpoint) = chainInfo.preferredEndpoints?.rest?.[0];\n    }\n\n    if (chainInfo.preferredEndpoints?.rpc?.[0]) {\n      (suggestChain.rpc as\n        | string\n        | ExtendedHttpEndpoint) = chainInfo.preferredEndpoints?.rpc?.[0];\n    }\n\n    await this.client.experimentalSuggestChain(suggestChain);\n  }\n\n  async disconnect() {\n    await this.client.disconnect();\n  }\n\n  async getSimpleAccount(chainId: string) {\n    const { address, username } = await this.getAccount(chainId);\n    return {\n      namespace: 'cosmos',\n      chainId,\n      address,\n      username,\n    };\n  }\n\n  async getAccount(chainId: string) {\n    const key = await this.client.getKey(chainId);\n    return {\n      username: key.name,\n      address: key.bech32Address,\n      algo: key.algo as Algo,\n      pubkey: key.pubKey,\n    };\n  }\n\n  getOfflineSigner(chainId: string, preferredSignType?: SignType) {\n    switch (preferredSignType) {\n      case 'amino':\n        return this.getOfflineSignerAmino(chainId);\n      case 'direct':\n        return this.getOfflineSignerDirect(chainId);\n      default:\n        return this.getOfflineSignerAmino(chainId);\n    }\n    // return this.client.getOfflineSignerAuto(chainId);\n  }\n\n  getOfflineSignerAmino(chainId: string) {\n    return this.client.getOfflineSignerOnlyAmino(chainId);\n  }\n\n  getOfflineSignerDirect(chainId: string) {\n    return this.client.getOfflineSigner(chainId) as OfflineDirectSigner;\n  }\n\n  async signAmino(\n    chainId: string,\n    signer: string,\n    signDoc: StdSignDoc,\n    signOptions?: SignOptions\n  ) {\n    return await this.client.signAmino(chainId, signer, signDoc, signOptions);\n  }\n\n  async signArbitrary(\n    chainId: string,\n    signer: string,\n    data: string | Uint8Array\n  ): Promise<StdSignature> {\n    return await this.client.signArbitrary(chainId, signer, data);\n  }\n\n  async signDirect(\n    chainId: string,\n    signer: string,\n    signDoc: DirectSignDoc,\n    signOptions?: SignOptions\n  ) {\n    return await this.client.signDirect(chainId, signer, signDoc, signOptions);\n  }\n\n  async sendTx(chainId: string, tx: Uint8Array, mode: BroadcastMode) {\n    return await this.client.sendTx(chainId, tx, mode);\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA,mBAA0C;AAInC,IAAM,gBAAN,MAA4C;AAAA,EAGjD,YAAY,QAAiB;AAC3B,SAAK,SAAS;AAAA,EAChB;AAAA,EAEA,MAAM,OAAO,UAA6B;AACxC,UAAM,KAAK,OAAO,OAAO,QAAQ;AAAA,EACnC;AAAA,EAEA,MAAM,aAAa,EAAE,SAAS,QAAQ,KAAK,GAAiB;AAC1D,QAAI,SAAS,QAAQ;AACnB,iBAAW,EAAE,gBAAgB,KAAK,QAAQ;AACxC,cAAM,KAAK,OAAO,aAAa,SAAS,eAAe;AAAA,MACzD;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAM,SAAS,WAAwB;AACrC,UAAM,mBAAe;AAAA,MACnB,UAAU;AAAA,MACV,UAAU,YAAY,CAAC,UAAU,SAAS,IAAI,CAAC;AAAA,IACjD;AAEA,QAAI,UAAU,oBAAoB,OAAO,CAAC,GAAG;AAC3C,MAAC,aAAa,OAEc,UAAU,oBAAoB,OAAO,CAAC;AAAA,IACpE;AAEA,QAAI,UAAU,oBAAoB,MAAM,CAAC,GAAG;AAC1C,MAAC,aAAa,MAEc,UAAU,oBAAoB,MAAM,CAAC;AAAA,IACnE;AAEA,UAAM,KAAK,OAAO,yBAAyB,YAAY;AAAA,EACzD;AAAA,EAEA,MAAM,aAAa;AACjB,UAAM,KAAK,OAAO,WAAW;AAAA,EAC/B;AAAA,EAEA,MAAM,iBAAiB,SAAiB;AACtC,UAAM,EAAE,SAAS,SAAS,IAAI,MAAM,KAAK,WAAW,OAAO;AAC3D,WAAO;AAAA,MACL,WAAW;AAAA,MACX;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAM,WAAW,SAAiB;AAChC,UAAM,MAAM,MAAM,KAAK,OAAO,OAAO,OAAO;AAC5C,WAAO;AAAA,MACL,UAAU,IAAI;AAAA,MACd,SAAS,IAAI;AAAA,MACb,MAAM,IAAI;AAAA,MACV,QAAQ,IAAI;AAAA,IACd;AAAA,EACF;AAAA,EAEA,iBAAiB,SAAiB,mBAA8B;AAC9D,YAAQ,mBAAmB;AAAA,MACzB,KAAK;AACH,eAAO,KAAK,sBAAsB,OAAO;AAAA,MAC3C,KAAK;AACH,eAAO,KAAK,uBAAuB,OAAO;AAAA,MAC5C;AACE,eAAO,KAAK,sBAAsB,OAAO;AAAA,IAC7C;AAAA,EAEF;AAAA,EAEA,sBAAsB,SAAiB;AACrC,WAAO,KAAK,OAAO,0BAA0B,OAAO;AAAA,EACtD;AAAA,EAEA,uBAAuB,SAAiB;AACtC,WAAO,KAAK,OAAO,iBAAiB,OAAO;AAAA,EAC7C;AAAA,EAEA,MAAM,UACJ,SACA,QACA,SACA,aACA;AACA,WAAO,MAAM,KAAK,OAAO,UAAU,SAAS,QAAQ,SAAS,WAAW;AAAA,EAC1E;AAAA,EAEA,MAAM,cACJ,SACA,QACA,MACuB;AACvB,WAAO,MAAM,KAAK,OAAO,cAAc,SAAS,QAAQ,IAAI;AAAA,EAC9D;AAAA,EAEA,MAAM,WACJ,SACA,QACA,SACA,aACA;AACA,WAAO,MAAM,KAAK,OAAO,WAAW,SAAS,QAAQ,SAAS,WAAW;AAAA,EAC3E;AAAA,EAEA,MAAM,OAAO,SAAiB,IAAgB,MAAqB;AACjE,WAAO,MAAM,KAAK,OAAO,OAAO,SAAS,IAAI,IAAI;AAAA,EACnD;AACF;","names":[]}