{"version":3,"sources":["../../src/extension/signer.ts"],"sourcesContent":["import { AccountData } from '@cosmjs/proto-signing';\nimport {\n  OfflineAminoSigner,\n  AminoSignResponse,\n  StdSignDoc,\n  StdSignature,\n} from '@cosmjs/amino';\nimport { WalletAccount } from '@cosmos-kit/core';\nimport { StationExtension } from './extension';\nimport {\n  Fee as TerraFee,\n  Msg as TerraMsg,\n  SignatureV2,\n} from '@terra-money/feather.js';\n\nexport class OfflineSigner implements OfflineAminoSigner {\n  private extension: StationExtension;\n  accountInfo: WalletAccount;\n\n  constructor(extension: StationExtension, accountInfo: WalletAccount) {\n    this.extension = extension;\n    this.accountInfo = accountInfo;\n  }\n\n  async getAccounts(): Promise<readonly AccountData[]> {\n    return [\n      {\n        address: this.accountInfo.address,\n        algo: this.accountInfo.algo || 'secp256k1',\n        pubkey: this.accountInfo.pubkey,\n      },\n    ];\n  }\n\n  async signAmino(\n    signerAddress: string,\n    signDoc: StdSignDoc\n  ): Promise<AminoSignResponse> {\n    const signDocFee = signDoc.fee;\n    const feeAmount = signDocFee.amount[0].amount + signDocFee.amount[0].denom;\n    const fakeMsgs = signDoc.msgs.map((msg) =>\n      JSON.stringify(TerraMsg.fromAmino(msg as TerraMsg.Amino).toData())\n    );\n\n    const signResponse = await this.extension.sign({\n      chainID: signDoc.chain_id,\n      msgs: fakeMsgs,\n      fee: new TerraFee(\n        parseInt(signDocFee.gas),\n        feeAmount,\n        signDocFee.payer,\n        signDocFee.granter\n      ),\n      memo: signDoc.memo,\n      signMode: SignatureV2.SignMode.SIGN_MODE_LEGACY_AMINO_JSON,\n    } as any);\n\n    const signature: StdSignature = {\n      pub_key: (signResponse.payload.result.auth_info.signer_infos[0]\n        .public_key as any).key,\n      signature: signResponse.payload.result.signatures[0],\n    };\n\n    return {\n      signed: signDoc,\n      signature,\n    };\n  }\n}\n"],"mappings":";AASA;AAAA,EACE,OAAO;AAAA,EACP,OAAO;AAAA,EACP;AAAA,OACK;AAEA,IAAM,gBAAN,MAAkD;AAAA,EAIvD,YAAY,WAA6B,aAA4B;AACnE,SAAK,YAAY;AACjB,SAAK,cAAc;AAAA,EACrB;AAAA,EAEA,MAAM,cAA+C;AACnD,WAAO;AAAA,MACL;AAAA,QACE,SAAS,KAAK,YAAY;AAAA,QAC1B,MAAM,KAAK,YAAY,QAAQ;AAAA,QAC/B,QAAQ,KAAK,YAAY;AAAA,MAC3B;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAM,UACJ,eACA,SAC4B;AAC5B,UAAM,aAAa,QAAQ;AAC3B,UAAM,YAAY,WAAW,OAAO,CAAC,EAAE,SAAS,WAAW,OAAO,CAAC,EAAE;AACrE,UAAM,WAAW,QAAQ,KAAK;AAAA,MAAI,CAAC,QACjC,KAAK,UAAU,SAAS,UAAU,GAAqB,EAAE,OAAO,CAAC;AAAA,IACnE;AAEA,UAAM,eAAe,MAAM,KAAK,UAAU,KAAK;AAAA,MAC7C,SAAS,QAAQ;AAAA,MACjB,MAAM;AAAA,MACN,KAAK,IAAI;AAAA,QACP,SAAS,WAAW,GAAG;AAAA,QACvB;AAAA,QACA,WAAW;AAAA,QACX,WAAW;AAAA,MACb;AAAA,MACA,MAAM,QAAQ;AAAA,MACd,UAAU,YAAY,SAAS;AAAA,IACjC,CAAQ;AAER,UAAM,YAA0B;AAAA,MAC9B,SAAU,aAAa,QAAQ,OAAO,UAAU,aAAa,CAAC,EAC3D,WAAmB;AAAA,MACtB,WAAW,aAAa,QAAQ,OAAO,WAAW,CAAC;AAAA,IACrD;AAEA,WAAO;AAAA,MACL,QAAQ;AAAA,MACR;AAAA,IACF;AAAA,EACF;AACF;","names":[]}