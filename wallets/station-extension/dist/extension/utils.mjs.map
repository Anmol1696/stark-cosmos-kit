{"version":3,"sources":["../../src/extension/utils.ts","../../src/extension/extension.ts"],"sourcesContent":["import { ClientNotExistError } from '@cosmos-kit/core';\n\nimport { StationExtension } from './extension';\n\ninterface StationWindow {\n  isStationExtensionAvailable?: boolean;\n}\n\nexport const getStationFromExtension: () => Promise<\n  StationExtension | undefined\n> = async () => {\n  if (typeof window === 'undefined') {\n    return void 0;\n  }\n\n  if (!(window as StationWindow).isStationExtensionAvailable) {\n    throw ClientNotExistError;\n  }\n\n  const stationExtension = new StationExtension();\n  await stationExtension.init();\n\n  return stationExtension;\n};\n","import { Extension, Tx, ExtensionOptions } from '@terra-money/feather.js';\nimport { NetworkInfo, Addresses, Pubkeys, ChainId } from './types';\n\ntype ConnectResponse = {\n  address: string;\n  addresses: Addresses;\n  pubkey: Pubkeys;\n};\n\ntype InfoResponse = Record<ChainId, NetworkInfo>;\n\ntype SignResponse = {\n  payload: {\n    result: Tx.Data;\n  };\n};\n\nfunction isValidResult({ error, ...payload }: any): boolean {\n  if (typeof payload.success !== 'boolean') {\n    return false;\n  } else if (\n    typeof payload.result === 'undefined' &&\n    typeof error === 'undefined'\n  ) {\n    return false;\n  }\n  return true;\n}\n\nexport class StationExtension {\n  private extension: Extension;\n  identifier = 'station';\n  _inTransactionProgress = false;\n\n  // resolvers\n  connectResolvers = new Set<[(data: any) => void, (error: any) => void]>();\n  infoResolvers = new Set<[(data: any) => void, (error: any) => void]>();\n  pubkeyResolvers = new Set<[(data: any) => void, (error: any) => void]>();\n  signResolvers = new Map<\n    number,\n    [(data: any) => void, (error: any) => void]\n  >();\n\n  constructor() {}\n\n  get isAvailable(): boolean {\n    return this.extension.isAvailable;\n  }\n\n  async init(): Promise<void> {\n    this.extension = new Extension();\n\n    this.onResponse();\n  }\n\n  async connect() {\n    return new Promise<ConnectResponse>((...resolver) => {\n      this.connectResolvers.add(resolver);\n      this.extension.connect();\n    });\n  }\n\n  async info() {\n    return new Promise<InfoResponse>((...resolver) => {\n      this.infoResolvers.add(resolver);\n      this.extension.info();\n    });\n  }\n\n  async getPubKey() {\n    return new Promise<ConnectResponse>((...resolver) => {\n      this.pubkeyResolvers.add(resolver);\n      this.extension.pubkey();\n    });\n  }\n\n  disconnect() {\n    this.connectResolvers.clear();\n    this.infoResolvers.clear();\n    this.signResolvers.clear();\n  }\n\n  async sign({ purgeQueue = true, ...data }: ExtensionOptions) {\n    return new Promise<SignResponse>((...resolver) => {\n      this._inTransactionProgress = true;\n\n      const id = this.extension.sign({\n        ...data,\n        purgeQueue,\n      });\n\n      this.signResolvers.set(id, resolver);\n\n      setTimeout(() => {\n        if (this.signResolvers.has(id)) {\n          this.signResolvers.delete(id);\n\n          if (this.signResolvers.size === 0) {\n            this._inTransactionProgress = false;\n          }\n        }\n      }, 1000 * 120);\n    });\n  }\n\n  private onResponse() {\n    this.extension.on('onConnect', (result) => {\n      if (!result) return;\n      const { error, ...payload } = result;\n\n      for (const [resolve, reject] of this.connectResolvers) {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(payload);\n        }\n      }\n\n      this.connectResolvers.clear();\n    });\n\n    this.extension.on('onGetPubkey', (result) => {\n      if (!result) return;\n      const { error, ...payload } = result;\n\n      for (const [resolve, reject] of this.pubkeyResolvers) {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(payload);\n        }\n      }\n\n      this.pubkeyResolvers.clear();\n    });\n\n    this.extension.on('onInterchainInfo', (result) => {\n      if (!result) return;\n      const { error, ...payload } = result;\n\n      for (const [resolve, reject] of this.infoResolvers) {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(payload);\n        }\n      }\n\n      this.infoResolvers.clear();\n    });\n\n    this.extension.on('onSign', (result) => {\n      if (!result || !isValidResult(result)) {\n        return;\n      }\n\n      const { error, ...payload } = result;\n\n      if (this.signResolvers.has(payload.id)) {\n        const [resolve, reject] = this.signResolvers.get(payload.id)!;\n\n        if (!payload.success) {\n          reject(error);\n        } else if (resolve) {\n          resolve({ name: 'onSign', payload });\n        }\n\n        this.signResolvers.delete(payload.id);\n\n        if (this.signResolvers.size === 0) {\n          this._inTransactionProgress = false;\n        }\n      }\n    });\n  }\n}\n"],"mappings":"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","names":[]}