{"version":3,"sources":["../../src/extension/main-wallet.ts","../../src/extension/chain-wallet.ts","../../src/extension/client.ts","../../src/extension/utils.ts"],"sourcesContent":["import { Wallet } from '@cosmos-kit/core';\nimport { MainWalletBase } from '@cosmos-kit/core';\n\nimport { ChainVectisExtension } from './chain-wallet';\nimport { VectisClient } from './client';\nimport { getVectisFromExtension } from './utils';\n\nexport class VectisExtensionWallet extends MainWalletBase {\n  constructor(walletInfo: Wallet) {\n    super(walletInfo, ChainVectisExtension);\n  }\n\n  async initClient() {\n    this.initingClient();\n    try {\n      const vectis = await getVectisFromExtension();\n      this.initClientDone(vectis ? new VectisClient(vectis) : undefined);\n    } catch (error) {\n      this.logger?.error(error);\n      this.initClientError(error);\n    }\n  }\n}\n","import { ChainRecord, ChainWalletBase, Wallet } from '@cosmos-kit/core';\n\nexport class ChainVectisExtension extends ChainWalletBase {\n  constructor(walletInfo: Wallet, chainInfo: ChainRecord) {\n    super(walletInfo, chainInfo);\n  }\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { chainRegistryChainToKeplr } from '@chain-registry/keplr';\nimport { Algo, StdSignDoc, StdSignature } from '@cosmjs/amino';\nimport {\n  BroadcastMode,\n  ChainRecord,\n  DirectSignDoc,\n  ExtendedHttpEndpoint,\n  SignOptions,\n  SignType,\n  WalletClient,\n} from '@cosmos-kit/core';\n\nimport type { Vectis } from './types';\n\nexport class VectisClient implements WalletClient {\n  readonly client: Vectis;\n\n  constructor(client: Vectis) {\n    this.client = client;\n  }\n\n  async enable(chainIds: string | string[]) {\n    await this.client.enable(chainIds);\n  }\n\n  async getSimpleAccount(chainId: string) {\n    const { address, name } = await this.client.getKey(chainId);\n    return {\n      namespace: 'cosmos',\n      chainId,\n      address,\n      username: name,\n    };\n  }\n\n  async getAccount(chainId: string) {\n    const {\n      address,\n      algo,\n      pubkey,\n      name,\n      isNanoLedger,\n      isVectisAccount,\n    } = await this.client.getKey(chainId);\n    return {\n      username: name,\n      address,\n      algo: algo as Algo,\n      pubkey,\n      isNanoLedger,\n      isSmartContract: isVectisAccount,\n    };\n  }\n\n  async getOfflineSigner(chainId: string, preferredSignType?: SignType) {\n    switch (preferredSignType) {\n      case 'amino':\n        return this.getOfflineSignerAmino(chainId);\n      case 'direct':\n        return this.getOfflineSignerDirect(chainId);\n      default:\n        return this.getOfflineSignerAmino(chainId);\n    }\n  }\n\n  getOfflineSignerAmino(chainId: string) {\n    return this.client.getOfflineSignerAmino(chainId);\n  }\n\n  getOfflineSignerDirect(chainId: string) {\n    return this.client.getOfflineSignerDirect(chainId);\n  }\n\n  async addChain({ chain, name, assetList, preferredEndpoints }: ChainRecord) {\n    const chainInfo = chainRegistryChainToKeplr(\n      chain,\n      assetList ? [assetList] : []\n    );\n\n    if (preferredEndpoints?.rest?.[0]) {\n      (chainInfo.rest as\n        | string\n        | ExtendedHttpEndpoint) = preferredEndpoints?.rest?.[0];\n    }\n\n    if (preferredEndpoints?.rpc?.[0]) {\n      (chainInfo.rpc as\n        | string\n        | ExtendedHttpEndpoint) = preferredEndpoints?.rpc?.[0];\n    }\n\n    await this.client.suggestChains([chainInfo]);\n  }\n\n  async signAmino(\n    chainId: string,\n    signer: string,\n    signDoc: StdSignDoc,\n    signOptions?: SignOptions\n  ) {\n    return await this.client.signAmino(signer, signDoc);\n  }\n\n  async signDirect(\n    chainId: string,\n    signer: string,\n    signDoc: DirectSignDoc,\n    signOptions?: SignOptions\n  ) {\n    return await this.client.signDirect(signer, signDoc);\n  }\n\n  async signArbitrary(\n    chainId: string,\n    signer: string,\n    data: string | Uint8Array\n  ): Promise<StdSignature> {\n    return await this.client.signArbitrary(chainId, signer, data);\n  }\n\n  async sendTx(chainId: string, tx: Uint8Array, mode: BroadcastMode) {\n    return await this.client.sendTx(chainId, tx, mode);\n  }\n}\n","import { ClientNotExistError } from '@cosmos-kit/core';\n\nimport type { Vectis, VectisWindow } from './types';\n\nexport const getVectisFromExtension: () => Promise<\n  Vectis | undefined\n> = async () => {\n  if (typeof window === 'undefined') {\n    return void 0;\n  }\n\n  const vectis = ((window as unknown) as VectisWindow).vectis?.cosmos;\n\n  if (vectis) {\n    return vectis;\n  }\n\n  if (document.readyState === 'complete') {\n    if (vectis) {\n      return vectis;\n    } else {\n      throw ClientNotExistError;\n    }\n  }\n\n  return new Promise((resolve, reject) => {\n    const documentStateChange = (event: Event) => {\n      if (\n        event.target &&\n        (event.target as Document).readyState === 'complete'\n      ) {\n        if (vectis) {\n          resolve(vectis);\n        } else {\n          reject(ClientNotExistError.message);\n        }\n        document.removeEventListener('readystatechange', documentStateChange);\n      }\n    };\n\n    document.addEventListener('readystatechange', documentStateChange);\n  });\n};\n"],"mappings":"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","names":[]}