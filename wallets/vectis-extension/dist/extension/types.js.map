{"version":3,"sources":["../../src/extension/types.ts"],"sourcesContent":["import {\n  AccountData,\n  Algo,\n  AminoSignResponse,\n  OfflineAminoSigner,\n  StdSignature,\n  StdSignDoc,\n} from '@cosmjs/amino';\nimport {\n  DirectSignResponse,\n  OfflineDirectSigner,\n  OfflineSigner,\n} from '@cosmjs/proto-signing';\nimport { BroadcastMode, DirectSignDoc } from '@cosmos-kit/core';\nimport type { ChainInfo } from '@keplr-wallet/types';\n\nexport type { ChainInfo };\nexport interface VectisWindow extends Window {\n  readonly vectis: {\n    readonly version: string;\n    readonly cosmos: Vectis;\n  };\n}\n\nexport interface Vectis {\n  suggestChains(chainsInfo: ChainInfo[]): Promise<void>;\n  enable(chainIds: string | string[]): Promise<void>;\n  getSupportedChains(): Promise<ChainInfo[]>;\n  getKey(chainId: string): Promise<KeyInfo>;\n  getAccounts(chainId: string): Promise<AccountData[]>;\n  signAmino(signerAddress: string, doc: StdSignDoc): Promise<AminoSignResponse>;\n  signDirect(\n    signerAddress: string,\n    doc: DirectSignDoc\n  ): Promise<DirectSignResponse>;\n  signArbitrary(\n    chainId: string,\n    signerAddress: string,\n    data: string | Uint8Array\n  ): Promise<StdSignature>;\n  getOfflineSignerAmino(chainId: string): OfflineAminoSigner;\n  getOfflineSignerDirect(chainId: string): OfflineDirectSigner;\n  getOfflineSigner(chainId: string): OfflineSigner;\n  sendTx(\n    chainId: string,\n    tx: Uint8Array,\n    mode: BroadcastMode\n  ): Promise<Uint8Array>;\n}\n\ntype KeyInfo = {\n  readonly name: string;\n  readonly algo: Algo;\n  readonly address: string;\n  readonly isNanoLedger: boolean;\n  readonly isVectisAccount: boolean;\n  readonly pubkey: Uint8Array;\n};\n"],"mappings":";;;;;;;;;;;;;;;AAAA;AAAA;","names":[]}