{"version":3,"sources":["../../src/extension/types.ts"],"sourcesContent":["import {\n  AminoSignResponse,\n  OfflineAminoSigner,\n  StdSignDoc,\n  StdSignature,\n} from '@cosmjs/amino';\nimport { OfflineDirectSigner, OfflineSigner } from '@cosmjs/proto-signing';\nimport { DirectSignResponse } from '@cosmjs/proto-signing';\nimport { BroadcastMode, Key } from '@cosmos-kit/core';\n\nexport interface FrontierSignOptions {\n  readonly preferNoSetFee?: boolean;\n  readonly preferNoSetMemo?: boolean;\n  readonly disableBalanceCheck?: boolean;\n}\n\nexport interface Frontier {\n  disconnect(): Promise<void>;\n  enable(chainIds: string | string[]): Promise<void>;\n  mode: 'extension';\n  getKey(chainId: string): Promise<Key>;\n  getOfflineSigner(chainId: string): OfflineAminoSigner & OfflineDirectSigner;\n  getOfflineSignerOnlyAmino(chainId: string): OfflineAminoSigner;\n  getOfflineSignerAuto(chainId: string): Promise<OfflineSigner>;\n  signAmino(\n    chainId: string,\n    signer: string,\n    signDoc: StdSignDoc,\n    signOptions?: FrontierSignOptions\n  ): Promise<AminoSignResponse>;\n  signDirect(\n    chainId: string,\n    signer: string,\n    signDoc: {\n      /** SignDoc bodyBytes */\n      bodyBytes?: Uint8Array | null;\n      /** SignDoc authInfoBytes */\n      authInfoBytes?: Uint8Array | null;\n      /** SignDoc chainId */\n      chainId?: string | null;\n      /** SignDoc accountNumber */\n      accountNumber?: Long | null;\n    },\n    signOptions?: FrontierSignOptions\n  ): Promise<DirectSignResponse>;\n  signArbitrary(\n    chainId: string,\n    signer: string,\n    data: string | Uint8Array\n  ): Promise<StdSignature>;\n  sendTx(\n    chainId: string,\n    tx: Uint8Array,\n    mode: BroadcastMode\n  ): Promise<Uint8Array>;\n}\n"],"mappings":";;;;;;;;;;;;;;;AAAA;AAAA;","names":[]}