{"version":3,"sources":["../../src/extension/main-wallet.ts","../../src/extension/chain-wallet.ts","../../src/extension/client.ts","../../src/extension/utils.ts"],"sourcesContent":["import { EndpointOptions, Wallet } from '@cosmos-kit/core';\nimport { MainWalletBase } from '@cosmos-kit/core';\n\nimport { ChainExodusExtension } from './chain-wallet';\nimport { ExodusClient } from './client';\nimport { getExodusFromExtension } from './utils';\n\nexport class ExodusExtensionWallet extends MainWalletBase {\n  constructor(\n    walletInfo: Wallet,\n    preferredEndpoints?: EndpointOptions['endpoints']\n  ) {\n    super(walletInfo, ChainExodusExtension);\n    this.preferredEndpoints = preferredEndpoints;\n  }\n\n  async initClient() {\n    this.initingClient();\n    try {\n      const exodus = await getExodusFromExtension();\n      if (!exodus?.cosmos) {\n        throw new Error('Exodus client does not support Cosmos provider');\n      }\n      this.initClientDone(exodus ? new ExodusClient(exodus.cosmos) : undefined);\n    } catch (error: unknown) {\n      this.logger?.error(error);\n      this.initClientError(error as Error);\n    }\n  }\n}\n","import { ChainRecord, ChainWalletBase, Wallet } from '@cosmos-kit/core';\n\nexport class ChainExodusExtension extends ChainWalletBase {\n  constructor(walletInfo: Wallet, chainInfo: ChainRecord) {\n    super(walletInfo, chainInfo);\n  }\n}\n","import { BroadcastMode, DirectSignDoc, WalletClient } from '@cosmos-kit/core';\n\nimport type {\n  AccountData,\n  DirectSignResponse,\n  ExodusCosmosProvider,\n  StdSignDoc,\n} from '../types';\n\nexport class ExodusClient implements WalletClient {\n  readonly client: ExodusCosmosProvider;\n\n  constructor(client: ExodusCosmosProvider) {\n    this.client = client;\n  }\n\n  async connect(chainId: string | string[]) {\n    await this.client.connect({\n      chainId: Array.isArray(chainId) ? chainId[0] : chainId,\n    });\n  }\n\n  async getSimpleAccount(chainId: string) {\n    const { address } = await this.getAccount(chainId);\n    return {\n      namespace: 'cosmos',\n      chainId,\n      address,\n    };\n  }\n\n  async getAccount(chainId: string) {\n    const response = await this.client.connect({ chainId });\n\n    return {\n      ...response,\n      pubkey: response.publicKey,\n    };\n  }\n\n  async getOfflineSigner(chainId: string) {\n    return {\n      getAccounts: async (): Promise<AccountData[]> => [\n        await this.getAccount(chainId),\n      ],\n      signDirect: async (\n        signer: string,\n        signDoc: DirectSignDoc\n      ): Promise<DirectSignResponse> => {\n        return this.client.signTransaction(signDoc);\n      },\n    };\n  }\n\n  async signAmino(chainId: string, signer: string, signDoc: StdSignDoc) {\n    return this.client.signAminoTransaction(signDoc);\n  }\n\n  async sendTx(chainId: string, transaction: Uint8Array, mode: BroadcastMode) {\n    return this.client.sendTx(chainId, transaction, mode);\n  }\n}\n","import { ClientNotExistError } from '@cosmos-kit/core';\n\nimport type { Exodus, ExodusWindow } from '../types';\n\nexport const getExodusFromExtension: () => Promise<\n  Exodus | undefined\n> = async () => {\n  if (typeof window === 'undefined') {\n    return void 0;\n  }\n\n  const exodus = ((window as unknown) as ExodusWindow).exodus;\n\n  if (exodus) {\n    return exodus;\n  }\n\n  if (document.readyState === 'complete') {\n    if (exodus) {\n      return exodus;\n    } else {\n      throw ClientNotExistError;\n    }\n  }\n\n  return new Promise((resolve, reject) => {\n    const documentStateChange = (event: Event) => {\n      if (\n        event.target &&\n        (event.target as Document).readyState === 'complete'\n      ) {\n        if (exodus) {\n          resolve(exodus);\n        } else {\n          reject(ClientNotExistError.message);\n        }\n        document.removeEventListener('readystatechange', documentStateChange);\n      }\n    };\n\n    document.addEventListener('readystatechange', documentStateChange);\n  });\n};\n"],"mappings":";AACA,SAAS,sBAAsB;;;ACD/B,SAAsB,uBAA+B;AAE9C,IAAM,uBAAN,cAAmC,gBAAgB;AAAA,EACxD,YAAY,YAAoB,WAAwB;AACtD,UAAM,YAAY,SAAS;AAAA,EAC7B;AACF;;;ACGO,IAAM,eAAN,MAA2C;AAAA,EAGhD,YAAY,QAA8B;AACxC,SAAK,SAAS;AAAA,EAChB;AAAA,EAEA,MAAM,QAAQ,SAA4B;AACxC,UAAM,KAAK,OAAO,QAAQ;AAAA,MACxB,SAAS,MAAM,QAAQ,OAAO,IAAI,QAAQ,CAAC,IAAI;AAAA,IACjD,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,iBAAiB,SAAiB;AACtC,UAAM,EAAE,QAAQ,IAAI,MAAM,KAAK,WAAW,OAAO;AACjD,WAAO;AAAA,MACL,WAAW;AAAA,MACX;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAM,WAAW,SAAiB;AAChC,UAAM,WAAW,MAAM,KAAK,OAAO,QAAQ,EAAE,QAAQ,CAAC;AAEtD,WAAO;AAAA,MACL,GAAG;AAAA,MACH,QAAQ,SAAS;AAAA,IACnB;AAAA,EACF;AAAA,EAEA,MAAM,iBAAiB,SAAiB;AACtC,WAAO;AAAA,MACL,aAAa,YAAoC;AAAA,QAC/C,MAAM,KAAK,WAAW,OAAO;AAAA,MAC/B;AAAA,MACA,YAAY,OACV,QACA,YACgC;AAChC,eAAO,KAAK,OAAO,gBAAgB,OAAO;AAAA,MAC5C;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAM,UAAU,SAAiB,QAAgB,SAAqB;AACpE,WAAO,KAAK,OAAO,qBAAqB,OAAO;AAAA,EACjD;AAAA,EAEA,MAAM,OAAO,SAAiB,aAAyB,MAAqB;AAC1E,WAAO,KAAK,OAAO,OAAO,SAAS,aAAa,IAAI;AAAA,EACtD;AACF;;;AC7DA,SAAS,2BAA2B;AAI7B,IAAM,yBAET,YAAY;AACd,MAAI,OAAO,WAAW,aAAa;AACjC,WAAO;AAAA,EACT;AAEA,QAAM,SAAW,OAAoC;AAErD,MAAI,QAAQ;AACV,WAAO;AAAA,EACT;AAEA,MAAI,SAAS,eAAe,YAAY;AACtC,QAAI,QAAQ;AACV,aAAO;AAAA,IACT,OAAO;AACL,YAAM;AAAA,IACR;AAAA,EACF;AAEA,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,UAAM,sBAAsB,CAAC,UAAiB;AAC5C,UACE,MAAM,UACL,MAAM,OAAoB,eAAe,YAC1C;AACA,YAAI,QAAQ;AACV,kBAAQ,MAAM;AAAA,QAChB,OAAO;AACL,iBAAO,oBAAoB,OAAO;AAAA,QACpC;AACA,iBAAS,oBAAoB,oBAAoB,mBAAmB;AAAA,MACtE;AAAA,IACF;AAEA,aAAS,iBAAiB,oBAAoB,mBAAmB;AAAA,EACnE,CAAC;AACH;;;AHnCO,IAAM,wBAAN,cAAoC,eAAe;AAAA,EACxD,YACE,YACA,oBACA;AACA,UAAM,YAAY,oBAAoB;AACtC,SAAK,qBAAqB;AAAA,EAC5B;AAAA,EAEA,MAAM,aAAa;AACjB,SAAK,cAAc;AACnB,QAAI;AACF,YAAM,SAAS,MAAM,uBAAuB;AAC5C,UAAI,CAAC,QAAQ,QAAQ;AACnB,cAAM,IAAI,MAAM,gDAAgD;AAAA,MAClE;AACA,WAAK,eAAe,SAAS,IAAI,aAAa,OAAO,MAAM,IAAI,MAAS;AAAA,IAC1E,SAAS,OAAP;AACA,WAAK,QAAQ,MAAM,KAAK;AACxB,WAAK,gBAAgB,KAAc;AAAA,IACrC;AAAA,EACF;AACF;","names":[]}