{"version":3,"sources":["../../src/extension/types.ts"],"sourcesContent":["import { AminoSignResponse, StdSignDoc } from '@cosmjs/amino';\nimport { OfflineDirectSigner, OfflineSigner } from '@cosmjs/proto-signing';\nimport { DirectSignResponse } from '@cosmjs/proto-signing';\nimport { BroadcastMode, Key, StdTx } from '@keplr-wallet/types';\n\nexport interface Trust {\n  enable(chainIds: string | string[]): Promise<void>;\n  mode: 'extension';\n  getKey(chainId: string): Promise<Key>;\n  getOfflineSigner(chainId: string): OfflineSigner & OfflineDirectSigner;\n  getOfflineSignerOnlyAmino(chainId: string): OfflineSigner;\n  getOfflineSignerAuto(\n    chainId: string\n  ): Promise<OfflineSigner | OfflineDirectSigner>;\n  signAmino(\n    chainId: string,\n    signerAddress: string,\n    signDoc: StdSignDoc\n  ): Promise<AminoSignResponse>;\n  signDirect(\n    chainId: string,\n    signerAddress: string,\n    signDoc: {\n      /** SignDoc bodyBytes */\n      bodyBytes?: Uint8Array | null;\n      /** SignDoc authInfoBytes */\n      authInfoBytes?: Uint8Array | null;\n      /** SignDoc chainId */\n      chainId?: string | null;\n      /** SignDoc accountNumber */\n      accountNumber?: Long | null;\n    }\n  ): Promise<DirectSignResponse>;\n  sendTx(\n    chainId: string,\n    tx: StdTx | Uint8Array,\n    mode: BroadcastMode\n  ): Promise<Uint8Array>;\n}\n"],"mappings":";;;;;;;;;;;;;;;AAAA;AAAA;","names":[]}