{"version":3,"sources":["../../src/extension/main-wallet.ts","../../src/extension/chain-wallet.ts","../../src/extension/client.ts","../../src/extension/utils.ts"],"sourcesContent":["import { Wallet } from '@cosmos-kit/core';\nimport { MainWalletBase } from '@cosmos-kit/core';\n\nimport { ChainTrustExtension } from './chain-wallet';\nimport { TrustClient } from './client';\nimport { getTrustFromExtension } from './utils';\n\nexport class TrustExtensionWallet extends MainWalletBase {\n  constructor(walletInfo: Wallet) {\n    super(walletInfo, ChainTrustExtension);\n  }\n\n  async initClient() {\n    this.initingClient();\n    try {\n      const trust = await getTrustFromExtension();\n      this.initClientDone(trust ? new TrustClient(trust) : undefined);\n    } catch (error) {\n      this.logger?.error(error);\n      this.initClientError(error);\n    }\n  }\n}\n","import { ChainRecord, ChainWalletBase, Wallet } from '@cosmos-kit/core';\n\nexport class ChainTrustExtension extends ChainWalletBase {\n  constructor(walletInfo: Wallet, chainInfo: ChainRecord) {\n    super(walletInfo, chainInfo);\n  }\n}\n","import { Algo } from '@cosmjs/proto-signing';\nimport { SignType, WalletClient } from '@cosmos-kit/core';\n\nimport { Trust } from './types';\n\nexport class TrustClient implements WalletClient {\n  readonly client: Trust;\n\n  constructor(client: Trust) {\n    this.client = client;\n  }\n\n  async enable(chainIds: string | string[]) {\n    await this.client.enable(chainIds);\n  }\n\n  async getSimpleAccount(chainId: string) {\n    const { address, username } = await this.getAccount(chainId);\n    return {\n      namespace: 'cosmos',\n      chainId,\n      address,\n      username,\n    };\n  }\n\n  async getAccount(chainId: string) {\n    const key = await this.client.getKey(chainId);\n    return {\n      username: key.name,\n      address: key.bech32Address,\n      algo: key.algo as Algo,\n      pubkey: key.pubKey,\n    };\n  }\n\n  getOfflineSigner(chainId: string, preferredSignType?: SignType) {\n    // switch (preferredSignType) {\n    //   case 'amino':\n    //     return this.getOfflineSignerAmino(chainId);\n    //   case 'direct':\n    //     return this.getOfflineSignerDirect(chainId);\n    //   default:\n    //     return this.getOfflineSignerAmino(chainId);\n    // }\n    return this.client.getOfflineSigner(chainId);\n  }\n}\n","import { ClientNotExistError } from '@cosmos-kit/core';\n\nimport { Trust } from './types';\n\ninterface TrustWindow {\n  trustwallet?: TrustExtension;\n}\n\ninterface TrustExtension {\n  cosmos?: Trust;\n}\n\nexport const getTrustFromExtension: () => Promise<\n  Trust | undefined\n> = async () => {\n  if (typeof window === 'undefined') {\n    return void 0;\n  }\n\n  const trust = (window as TrustWindow).trustwallet?.cosmos;\n\n  if (trust) {\n    return trust;\n  }\n\n  if (document.readyState === 'complete') {\n    if (trust) {\n      return trust;\n    } else {\n      throw ClientNotExistError;\n    }\n  }\n\n  return new Promise((resolve, reject) => {\n    const documentStateChange = (event: Event) => {\n      if (\n        event.target &&\n        (event.target as Document).readyState === 'complete'\n      ) {\n        if (trust) {\n          resolve(trust);\n        } else {\n          reject(ClientNotExistError.message);\n        }\n        document.removeEventListener('readystatechange', documentStateChange);\n      }\n    };\n\n    document.addEventListener('readystatechange', documentStateChange);\n  });\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,IAAAA,eAA+B;;;ACD/B,kBAAqD;AAE9C,IAAM,sBAAN,cAAkC,4BAAgB;AAAA,EACvD,YAAY,YAAoB,WAAwB;AACtD,UAAM,YAAY,SAAS;AAAA,EAC7B;AACF;;;ACDO,IAAM,cAAN,MAA0C;AAAA,EAG/C,YAAY,QAAe;AACzB,SAAK,SAAS;AAAA,EAChB;AAAA,EAEA,MAAM,OAAO,UAA6B;AACxC,UAAM,KAAK,OAAO,OAAO,QAAQ;AAAA,EACnC;AAAA,EAEA,MAAM,iBAAiB,SAAiB;AACtC,UAAM,EAAE,SAAS,SAAS,IAAI,MAAM,KAAK,WAAW,OAAO;AAC3D,WAAO;AAAA,MACL,WAAW;AAAA,MACX;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAM,WAAW,SAAiB;AAChC,UAAM,MAAM,MAAM,KAAK,OAAO,OAAO,OAAO;AAC5C,WAAO;AAAA,MACL,UAAU,IAAI;AAAA,MACd,SAAS,IAAI;AAAA,MACb,MAAM,IAAI;AAAA,MACV,QAAQ,IAAI;AAAA,IACd;AAAA,EACF;AAAA,EAEA,iBAAiB,SAAiB,mBAA8B;AAS9D,WAAO,KAAK,OAAO,iBAAiB,OAAO;AAAA,EAC7C;AACF;;;AC/CA,IAAAC,eAAoC;AAY7B,IAAM,wBAET,YAAY;AACd,MAAI,OAAO,WAAW,aAAa;AACjC,WAAO;AAAA,EACT;AAEA,QAAM,QAAS,OAAuB,aAAa;AAEnD,MAAI,OAAO;AACT,WAAO;AAAA,EACT;AAEA,MAAI,SAAS,eAAe,YAAY;AACtC,QAAI,OAAO;AACT,aAAO;AAAA,IACT,OAAO;AACL,YAAM;AAAA,IACR;AAAA,EACF;AAEA,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,UAAM,sBAAsB,CAAC,UAAiB;AAC5C,UACE,MAAM,UACL,MAAM,OAAoB,eAAe,YAC1C;AACA,YAAI,OAAO;AACT,kBAAQ,KAAK;AAAA,QACf,OAAO;AACL,iBAAO,iCAAoB,OAAO;AAAA,QACpC;AACA,iBAAS,oBAAoB,oBAAoB,mBAAmB;AAAA,MACtE;AAAA,IACF;AAEA,aAAS,iBAAiB,oBAAoB,mBAAmB;AAAA,EACnE,CAAC;AACH;;;AH3CO,IAAM,uBAAN,cAAmC,4BAAe;AAAA,EACvD,YAAY,YAAoB;AAC9B,UAAM,YAAY,mBAAmB;AAAA,EACvC;AAAA,EAEA,MAAM,aAAa;AACjB,SAAK,cAAc;AACnB,QAAI;AACF,YAAM,QAAQ,MAAM,sBAAsB;AAC1C,WAAK,eAAe,QAAQ,IAAI,YAAY,KAAK,IAAI,MAAS;AAAA,IAChE,SAAS,OAAP;AACA,WAAK,QAAQ,MAAM,KAAK;AACxB,WAAK,gBAAgB,KAAK;AAAA,IAC5B;AAAA,EACF;AACF;","names":["import_core","import_core"]}