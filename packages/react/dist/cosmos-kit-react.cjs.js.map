{"mappings":"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","sources":["packages/react/src/index.ts","packages/react/src/modal/index.ts","packages/react/src/modal/modal.tsx","packages/react/src/modal/components/views/index.ts","packages/react/src/modal/components/views/config.ts","packages/react/src/modal/components/views/Connected.tsx","packages/react/src/modal/components/views/Connecting.tsx","packages/react/src/modal/components/views/Error.tsx","packages/react/src/modal/components/views/NotExist.tsx","packages/react/src/modal/components/views/QRCode.tsx","packages/react/src/modal/components/views/Rejected.tsx","packages/react/src/modal/components/views/WalletList.tsx","packages/react/src/provider.tsx"],"sourcesContent":["export { DefaultModal, WalletModal } from './modal';\nexport { ChainProvider } from './provider';\nexport {\n  useChain,\n  useChainWallet,\n  useManager,\n  useNameService,\n  useWallet,\n  useWalletClient,\n  walletContext,\n} from '@cosmos-kit/react-lite';\n","export * from './modal';\n","import { ThemeProvider } from '@cosmology-ui/react';\nimport {\n  ModalView,\n  State,\n  WalletModalProps,\n  WalletStatus,\n} from '@cosmos-kit/core';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport { defaultModalViews, ModalViewImpl } from './components/views';\n\nexport const WalletModal = ({\n  isOpen,\n  setOpen,\n  walletRepo,\n  modalViews,\n  includeAllWalletsOnMobile,\n}: WalletModalProps & {\n  modalViews: typeof defaultModalViews;\n  includeAllWalletsOnMobile?: boolean;\n}) => {\n  const initialFocus = useRef();\n  const [currentView, setCurrentView] = useState<ModalView>(\n    ModalView.WalletList\n  );\n  const [qrState, setQRState] = useState<State>(State.Init); // state of QRCode\n  const [qrMsg, setQRMsg] = useState<string>(''); // message of QRCode error\n\n  const current = walletRepo?.current;\n  (current?.client as any)?.setActions?.({\n    qrUrl: {\n      state: setQRState,\n      message: setQRMsg,\n    },\n  });\n  const walletStatus = current?.walletStatus;\n  const message = current?.message;\n\n  useEffect(() => {\n    if (isOpen) {\n      switch (walletStatus) {\n        case WalletStatus.Connecting:\n          if (qrState === State.Init) {\n            setCurrentView(ModalView.Connecting);\n          } else {\n            setCurrentView(ModalView.QRCode);\n          }\n          break;\n        case WalletStatus.Connected:\n          setCurrentView(ModalView.Connected);\n          break;\n        case WalletStatus.Error:\n          if (qrState === State.Init) {\n            setCurrentView(ModalView.Error);\n          } else {\n            setCurrentView(ModalView.QRCode);\n          }\n          break;\n        case WalletStatus.Rejected:\n          setCurrentView(ModalView.Rejected);\n          break;\n        case WalletStatus.NotExist:\n          setCurrentView(ModalView.NotExist);\n          break;\n        case WalletStatus.Disconnected:\n          setCurrentView(ModalView.WalletList);\n          break;\n        default:\n          setCurrentView(ModalView.WalletList);\n          break;\n      }\n    }\n  }, [isOpen, qrState, walletStatus, qrMsg, message]);\n\n  const onCloseModal = useCallback(() => {\n    setOpen(false);\n    if (walletStatus === 'Connecting') {\n      current?.disconnect();\n    }\n  }, [setOpen, walletStatus, current]);\n\n  const onReturn = useCallback(() => {\n    setCurrentView(ModalView.WalletList);\n  }, [setCurrentView]);\n\n  const wallets = useMemo(\n    () =>\n      walletRepo?.isMobile && !includeAllWalletsOnMobile\n        ? walletRepo?.wallets.filter((w) => !w.walletInfo.mobileDisabled)\n        : walletRepo?.wallets,\n    [walletRepo, includeAllWalletsOnMobile]\n  );\n\n  const modalView: ModalViewImpl = useMemo(() => {\n    const getImplementation = modalViews[`${currentView}`];\n\n    switch (currentView) {\n      case ModalView.WalletList:\n        return getImplementation({\n          onClose: onCloseModal,\n          wallets: wallets || [],\n          initialFocus: initialFocus,\n        });\n      default:\n        if (!current) {\n          return {\n            head: null,\n            content: null,\n          };\n        }\n        return getImplementation({\n          onClose: onCloseModal,\n          onReturn: onReturn,\n          wallet: current,\n        });\n    }\n  }, [\n    currentView,\n    onReturn,\n    onCloseModal,\n    current,\n    qrState,\n    walletStatus,\n    walletRepo,\n    message,\n    qrMsg,\n  ]);\n\n  return (\n    <ThemeProvider>\n      <span>hello</span>\n      {/* <ConnectModal\n        isOpen={isOpen}\n        header={modalView.head}\n        onClose={onCloseModal}\n      >\n        {modalView.content}\n      </ConnectModal> */}\n    </ThemeProvider>\n  );\n};\n\nexport const DefaultModal = ({\n  isOpen,\n  setOpen,\n  walletRepo,\n}: WalletModalProps) => {\n  return (\n    <WalletModal\n      isOpen={isOpen}\n      setOpen={setOpen}\n      walletRepo={walletRepo}\n      modalViews={defaultModalViews}\n    />\n  );\n};\n","export * from './config';\nexport * from './Connected';\nexport * from './Connecting';\nexport * from './Error';\nexport * from './NotExist';\nexport * from './QRCode';\nexport * from './Rejected';\nexport * from './WalletList';\n","import {\n  ModalViews,\n  WalletListViewProps,\n  WalletViewProps,\n} from '@cosmos-kit/core';\n\nimport { ConnectedView } from './Connected';\nimport { ConnectingView } from './Connecting';\nimport { ErrorView } from './Error';\nimport { NotExistView } from './NotExist';\nimport { QRCodeView } from './QRCode';\nimport { RejectedView } from './Rejected';\nimport { WalletListView } from './WalletList';\n\nexport type ModalViewImpl = {\n  head: React.ReactNode;\n  content: React.ReactNode;\n};\n\nexport type ModalViewImplGetter = (\n  props: WalletViewProps | WalletListViewProps\n) => ModalViewImpl;\n\nexport const defaultModalViews: Record<\n  keyof ModalViews,\n  ModalViewImplGetter\n> = {\n  Connecting: ConnectingView,\n  Connected: ConnectedView,\n  Error: ErrorView,\n  NotExist: NotExistView,\n  Rejected: RejectedView,\n  QRCode: QRCodeView,\n  WalletList: WalletListView,\n};\n","import { ConnectModalHead, ConnectModalStatus } from '@cosmology-ui/react';\nimport { WalletViewProps } from '@cosmos-kit/core';\n\nimport { ModalViewImpl } from './config';\n\nexport function ConnectedView({\n  onClose,\n  onReturn,\n  wallet,\n}: WalletViewProps): ModalViewImpl {\n  const { walletInfo, username, address } = wallet;\n\n  const onDisconnect = () => wallet.disconnect(true);\n\n  const modalHead = (\n    <ConnectModalHead\n      title={walletInfo.prettyName}\n      hasBackButton={true}\n      onClose={onClose}\n      onBack={onReturn}\n    />\n  );\n\n  const modalContent = (\n    <ConnectModalStatus\n      wallet={{\n        name: walletInfo.name,\n        prettyName: walletInfo.prettyName,\n        logo: walletInfo.logo,\n        isMobile: walletInfo.mode === 'wallet-connect',\n        mobileDisabled: walletInfo.mobileDisabled,\n      }}\n      status=\"Connected\"\n      connectedInfo={{\n        name: username,\n        avatarUrl: '',\n        address,\n      }}\n      onDisconnect={onDisconnect}\n    />\n  );\n\n  return { head: modalHead, content: modalContent };\n}\n","import { ConnectModalHead, ConnectModalStatus } from '@cosmology-ui/react';\nimport { WalletViewProps } from '@cosmos-kit/core';\n\nimport { ModalViewImpl } from './config';\n\nexport function ConnectingView({\n  onClose,\n  onReturn,\n  wallet,\n}: WalletViewProps): ModalViewImpl {\n  const {\n    walletInfo: { prettyName, mode },\n    message,\n  } = wallet;\n\n  let title = 'Requesting Connection';\n  let desc: string =\n    mode === 'wallet-connect'\n      ? `Approve ${prettyName} connection request on your mobile.`\n      : `Open the ${prettyName} browser extension to connect your wallet.`;\n\n  if (message === 'InitClient') {\n    title = 'Initializing Wallet Client';\n    desc = '';\n  }\n\n  const modalHead = (\n    <ConnectModalHead\n      title={prettyName}\n      hasBackButton={true}\n      onClose={onClose}\n      onBack={onReturn}\n    />\n  );\n\n  const modalContent = (\n    <ConnectModalStatus\n      status=\"Connecting\"\n      wallet={{\n        name: wallet.walletInfo.name,\n        prettyName: wallet.walletInfo.prettyName,\n        logo: wallet.walletInfo.logo,\n        isMobile: wallet.walletInfo.mode === 'wallet-connect',\n        mobileDisabled: wallet.walletInfo.mobileDisabled,\n      }}\n      contentHeader={title}\n      contentDesc={desc}\n    />\n  );\n\n  return { head: modalHead, content: modalContent };\n}\n","import { ConnectModalHead, ConnectModalStatus } from '@cosmology-ui/react';\nimport { WalletViewProps } from '@cosmos-kit/core';\n\nimport { ModalViewImpl } from './config';\n\nexport function ErrorView({\n  onClose,\n  onReturn,\n  wallet,\n}: WalletViewProps): ModalViewImpl {\n  const {\n    walletInfo: { prettyName, logo },\n    message,\n  } = wallet;\n\n  const modalHead = (\n    <ConnectModalHead\n      title={prettyName}\n      hasBackButton={true}\n      onClose={onClose}\n      onBack={onReturn}\n    />\n  );\n\n  const modalContent = (\n    <ConnectModalStatus\n      status=\"Error\"\n      wallet={{\n        name: wallet.walletInfo.name,\n        prettyName: wallet.walletInfo.prettyName,\n        logo: wallet.walletInfo.logo,\n        isMobile: wallet.walletInfo.mode === 'wallet-connect',\n        mobileDisabled: wallet.walletInfo.mobileDisabled,\n      }}\n      contentHeader={'Oops! Something wrong...'}\n      contentDesc={message}\n      onChangeWallet={onReturn}\n    />\n  );\n\n  return { head: modalHead, content: modalContent };\n}\n","import { ConnectModalHead, ConnectModalStatus } from '@cosmology-ui/react';\nimport { WalletViewProps } from '@cosmos-kit/core';\nimport { FaAndroid } from 'react-icons/fa';\nimport { GoDesktopDownload } from 'react-icons/go';\nimport { GrFirefox } from 'react-icons/gr';\nimport { RiChromeFill } from 'react-icons/ri';\nimport { RiAppStoreFill } from 'react-icons/ri';\n\nimport { ModalViewImpl } from './config';\n\nexport function NotExistView({\n  onClose,\n  onReturn,\n  wallet,\n}: WalletViewProps): ModalViewImpl {\n  const {\n    walletInfo: { prettyName },\n    downloadInfo,\n  } = wallet;\n\n  const onInstall = () => {\n    window.open(downloadInfo?.link, '_blank');\n  };\n\n  const IconComp = getIcon(downloadInfo);\n\n  const modalHead = (\n    <ConnectModalHead\n      title={prettyName}\n      hasBackButton={true}\n      onClose={onClose}\n      onBack={onReturn}\n    />\n  );\n\n  const modalContent = (\n    <ConnectModalStatus\n      status=\"NotExist\"\n      wallet={{\n        name: wallet.walletInfo.name,\n        prettyName: wallet.walletInfo.prettyName,\n        logo: wallet.walletInfo.logo,\n        isMobile: wallet.walletInfo.mode === 'wallet-connect',\n        mobileDisabled: wallet.walletInfo.mobileDisabled,\n      }}\n      contentHeader={`${prettyName} Not Installed`}\n      contentDesc={\n        onInstall\n          ? `If ${prettyName.toLowerCase()} is installed on your device, please refresh this page or follow the browser instruction.`\n          : `Download link not provided. Try searching it or consulting the developer team.`\n      }\n      onInstall={onInstall}\n      installIcon={<IconComp />}\n      disableInstall={!downloadInfo?.link}\n    />\n  );\n\n  return { head: modalHead, content: modalContent };\n}\n\nfunction getIcon(downloadInfo: WalletViewProps['wallet']['downloadInfo']) {\n  if (downloadInfo?.browser === 'chrome') return RiChromeFill;\n  if (downloadInfo?.browser === 'firefox') return GrFirefox;\n  if (downloadInfo?.os === 'android') return FaAndroid;\n  if (downloadInfo?.os === 'ios') return RiAppStoreFill;\n  return GoDesktopDownload;\n}\n","import {\n  ConnectModalHead,\n  ConnectModalQRCode,\n  QRCodeStatus,\n} from '@cosmology-ui/react';\nimport { ExpiredError, State, WalletViewProps } from '@cosmos-kit/core';\n\nimport { ModalViewImpl } from './config';\n\nexport function QRCodeView({\n  onClose,\n  onReturn,\n  wallet,\n}: WalletViewProps): ModalViewImpl {\n  const {\n    walletInfo: { prettyName },\n    qrUrl: { data, state, message },\n  } = wallet;\n\n  function getParts() {\n    let desc = `Open ${prettyName} App to Scan`;\n    let errorTitle: string, errorDesc: string;\n    if (state === 'Error') {\n      desc = void 0;\n      if (message === ExpiredError.message) {\n        errorTitle = 'QRCode Expired';\n        errorDesc = 'Click to refresh.';\n      } else {\n        errorTitle = 'QRCode Error';\n        errorDesc = message;\n      }\n    }\n\n    let status: QRCodeStatus;\n\n    switch (state) {\n      case State.Pending:\n        status = 'Pending';\n        break;\n      case State.Done:\n        status = 'Done';\n        break;\n      case State.Error:\n        if (message === ExpiredError.message) {\n          status = 'Expired';\n        } else {\n          status = 'Error';\n        }\n        break;\n      default:\n        status = 'Error';\n    }\n\n    return { desc, errorTitle, errorDesc, status };\n  }\n\n  const { desc, errorTitle, errorDesc, status } = getParts();\n\n  const onRefresh = () => {\n    wallet.connect(false);\n  };\n\n  const modalHead = (\n    <ConnectModalHead\n      title={prettyName}\n      hasBackButton={true}\n      onClose={onClose}\n      onBack={onReturn}\n    />\n  );\n\n  const modalContent = (\n    <ConnectModalQRCode\n      status={status}\n      link={data || ''}\n      description={desc}\n      errorTitle={errorTitle}\n      errorDesc={errorDesc}\n      onRefresh={onRefresh}\n    />\n  );\n\n  return { head: modalHead, content: modalContent };\n}\n","import { ConnectModalHead, ConnectModalStatus } from '@cosmology-ui/react';\nimport { WalletViewProps } from '@cosmos-kit/core';\n\nimport { ModalViewImpl } from './config';\n\nexport function RejectedView({\n  onClose,\n  onReturn,\n  wallet,\n}: WalletViewProps): ModalViewImpl {\n  const {\n    walletInfo: { prettyName },\n  } = wallet;\n\n  const onReconnect = () => {\n    wallet.connect(false);\n  };\n\n  const modalHead = (\n    <ConnectModalHead\n      title={prettyName}\n      hasBackButton={true}\n      onClose={onClose}\n      onBack={onReturn}\n    />\n  );\n\n  const modalContent = (\n    <ConnectModalStatus\n      status=\"Rejected\"\n      wallet={{\n        name: wallet.walletInfo.name,\n        prettyName: wallet.walletInfo.prettyName,\n        logo: wallet.walletInfo.logo,\n        isMobile: wallet.walletInfo.mode === 'wallet-connect',\n        mobileDisabled: wallet.walletInfo.mobileDisabled,\n      }}\n      contentHeader={'Request Rejected'}\n      contentDesc={\n        wallet.rejectMessageTarget || 'Connection permission is denied.'\n      }\n      onConnect={onReconnect}\n    />\n  );\n\n  return { head: modalHead, content: modalContent };\n}\n","import {\n  ConnectModalHead,\n  ConnectModalWalletList,\n  ConnectModalWalletListProps,\n} from '@cosmology-ui/react';\nimport { ChainWalletBase, WalletListViewProps } from '@cosmos-kit/core';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\ninterface DynamicWalletListProps {\n  wallets: WalletListViewProps['wallets'];\n  onClose: () => void;\n}\n\nconst DynamicWalletList = ({ wallets, onClose }: DynamicWalletListProps) => {\n  const [isLargeScreen, setIsLargeScreen] = useState(true);\n\n  const onWalletClicked = useCallback(async (wallet: ChainWalletBase) => {\n    await wallet.connect(true);\n    if (wallet.isWalletConnected) {\n      onClose();\n    }\n  }, []);\n\n  useEffect(() => {\n    const handleWindowResize = () => {\n      if (window.innerWidth >= 768) {\n        setIsLargeScreen(true);\n      } else {\n        setIsLargeScreen(false);\n      }\n    };\n    handleWindowResize();\n\n    window.addEventListener('resize', handleWindowResize);\n\n    return () => {\n      window.removeEventListener('resize', handleWindowResize);\n    };\n  }, []);\n\n  const walletsData: ConnectModalWalletListProps['wallets'] = useMemo(\n    () =>\n      wallets\n        .sort((a, b) => {\n          if (a.walletInfo.mode === b.walletInfo.mode) {\n            return 0;\n          } else if (a.walletInfo.mode !== 'wallet-connect') {\n            return -1;\n          } else {\n            return 1;\n          }\n        })\n        .map((wallet, i) => ({\n          name: wallet.walletInfo.name,\n          prettyName: wallet.walletInfo.prettyName,\n          logo: wallet.walletInfo.logo,\n          isMobile: wallet.walletInfo.mode === 'wallet-connect',\n          mobileDisabled: wallet.walletInfo.mobileDisabled,\n          downloadUrl: '',\n          originalWallet: wallet,\n          buttonShape: i < 2 && isLargeScreen ? 'square' : 'list',\n        })),\n    [wallets, isLargeScreen]\n  );\n\n  return (\n    <ConnectModalWalletList\n      wallets={walletsData}\n      onWalletItemClick={onWalletClicked}\n    />\n  );\n};\n\nexport const WalletListView = ({\n  onClose,\n  wallets,\n  initialFocus,\n}: WalletListViewProps) => {\n  const modalHead = (\n    <ConnectModalHead\n      title=\"Select your wallet\"\n      hasBackButton={false}\n      onClose={onClose}\n    />\n  );\n\n  const modalContent = (\n    <DynamicWalletList wallets={wallets} onClose={onClose} />\n  );\n\n  return { head: modalHead, content: modalContent };\n};\n","import { AssetList, Chain } from '@chain-registry/types';\nimport {\n  EndpointOptions,\n  Logger,\n  LogLevel,\n  MainWalletBase,\n  NameServiceName,\n  SessionOptions,\n  SignerOptions,\n  WalletConnectOptions,\n  WalletModalProps,\n} from '@cosmos-kit/core';\nimport { ChainProvider as ChainProviderLite } from '@cosmos-kit/react-lite';\nimport { ReactNode, useCallback, useMemo } from 'react';\n\nimport { WalletModal } from './modal';\nimport { defaultModalViews } from './modal/components/views';\n\nexport const ChainProvider = ({\n  chains,\n  assetLists,\n  wallets,\n  walletModal,\n  modalViews,\n  throwErrors = false,\n  defaultNameService = 'icns',\n  walletConnectOptions,\n  signerOptions,\n  endpointOptions,\n  sessionOptions,\n  logLevel = 'WARN',\n  children,\n}: {\n  chains: Chain[];\n  assetLists: AssetList[];\n  wallets: MainWalletBase[];\n  walletModal?: (props: WalletModalProps) => JSX.Element;\n  modalViews?: typeof defaultModalViews;\n  wrappedWithChakra?: boolean;\n  throwErrors?: boolean;\n  defaultNameService?: NameServiceName;\n  walletConnectOptions?: WalletConnectOptions; // SignClientOptions is required if using wallet connect v2\n  signerOptions?: SignerOptions;\n  endpointOptions?: EndpointOptions;\n  sessionOptions?: SessionOptions;\n  logLevel?: LogLevel;\n  children: ReactNode;\n}) => {\n  const logger = useMemo(() => new Logger(logLevel), []);\n\n  const getChainProvider = (\n    modal: (props: WalletModalProps) => JSX.Element\n  ) => (\n    <ChainProviderLite\n      chains={chains}\n      assetLists={assetLists}\n      wallets={wallets}\n      walletModal={modal}\n      throwErrors={throwErrors}\n      defaultNameService={defaultNameService}\n      walletConnectOptions={walletConnectOptions}\n      signerOptions={signerOptions}\n      endpointOptions={endpointOptions}\n      sessionOptions={sessionOptions}\n      logLevel={logLevel}\n    >\n      {children}\n    </ChainProviderLite>\n  );\n\n  if (walletModal) {\n    logger.debug('Using provided wallet modal.');\n    return getChainProvider(walletModal);\n  }\n\n  logger.debug('Using default wallet modal.');\n\n  const defaultModal = useCallback(\n    (props: WalletModalProps) => (\n      <WalletModal\n        {...props}\n        modalViews={{\n          ...defaultModalViews,\n          ...modalViews,\n        }}\n      />\n    ),\n    [defaultModalViews]\n  );\n\n  logger.debug('Wrap with <ChakraProviderWithGivenTheme>.');\n\n  return getChainProvider(defaultModal);\n};\n"],"names":[],"version":3,"file":"cosmos-kit-react.cjs.js.map"}