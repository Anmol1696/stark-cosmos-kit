{"version":3,"sources":["../src/hooks/useChain.ts","../src/provider.tsx","../src/utils.ts","../src/hooks/useChainWallet.ts","../src/hooks/useManager.ts","../src/hooks/useNameService.ts","../src/hooks/useWallet.ts","../src/hooks/useWalletClient.ts"],"sourcesContent":["import { ChainContext, ChainName } from '@cosmos-kit/core';\nimport React from 'react';\n\nimport { walletContext } from '../provider';\nimport { getChainWalletContext } from '../utils';\n\nexport const useChain = (\n  chainName: ChainName,\n  sync: boolean = true\n): ChainContext => {\n  const context = React.useContext(walletContext);\n\n  if (!context) {\n    throw new Error('You have forgot to use ChainProvider.');\n  }\n\n  const { walletManager, modalProvided } = context;\n\n  if (!modalProvided) {\n    throw new Error(\n      'You have to provide `walletModal` to use `useChain`, or use `useChainWallet` instead.'\n    );\n  }\n\n  const walletRepo = walletManager.getWalletRepo(chainName);\n  walletRepo.activate();\n  const {\n    connect,\n    disconnect,\n    openView,\n    closeView,\n    current,\n    chainRecord: { chain, assetList },\n    getRpcEndpoint,\n    getRestEndpoint,\n    getStargateClient,\n    getCosmWasmClient,\n    getNameService,\n  } = walletRepo;\n\n  const chainWalletContext = getChainWalletContext(\n    chain.chain_id,\n    current,\n    sync\n  );\n\n  return {\n    ...chainWalletContext,\n    walletRepo,\n    chain,\n    assets: assetList,\n    openView,\n    closeView,\n    connect: () => connect(void 0, sync),\n    disconnect: () => disconnect(void 0, sync),\n    getRpcEndpoint,\n    getRestEndpoint,\n    getStargateClient,\n    getCosmWasmClient,\n    getNameService,\n  };\n};\n","import { AssetList, Chain } from '@chain-registry/types';\nimport {\n  Data,\n  EndpointOptions,\n  Logger,\n  LogLevel,\n  MainWalletBase,\n  NameServiceName,\n  SessionOptions,\n  SignerOptions,\n  State,\n  WalletConnectOptions,\n  WalletManager,\n  WalletModalProps,\n  WalletRepo,\n} from '@cosmos-kit/core';\nimport React, {\n  createContext,\n  ReactNode,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\n\nexport const walletContext = createContext<{\n  walletManager: WalletManager;\n  modalProvided: boolean;\n} | null>(null);\n\nexport const ChainProvider = ({\n  chains,\n  assetLists,\n  wallets,\n  walletModal: ProvidedWalletModal,\n  throwErrors = false,\n  defaultNameService = 'icns',\n  walletConnectOptions,\n  signerOptions,\n  endpointOptions,\n  sessionOptions,\n  logLevel = 'WARN',\n  children,\n}: {\n  chains: Chain[];\n  assetLists: AssetList[];\n  wallets: MainWalletBase[];\n  walletModal?: (props: WalletModalProps) => JSX.Element;\n  throwErrors?: boolean;\n  defaultNameService?: NameServiceName;\n  walletConnectOptions?: WalletConnectOptions; // SignClientOptions is required if using wallet connect v2\n  signerOptions?: SignerOptions;\n  endpointOptions?: EndpointOptions;\n  sessionOptions?: SessionOptions;\n  logLevel?: LogLevel;\n  children: ReactNode;\n}) => {\n  const logger = useMemo(() => new Logger(logLevel), []);\n  const walletManager = useMemo(\n    () =>\n      new WalletManager(\n        chains,\n        assetLists,\n        wallets,\n        logger,\n        throwErrors,\n        defaultNameService,\n        walletConnectOptions,\n        signerOptions,\n        endpointOptions,\n        sessionOptions\n      ),\n    []\n  );\n\n  const [isViewOpen, setViewOpen] = useState<boolean>(false);\n  const [viewWalletRepo, setViewWalletRepo] = useState<\n    WalletRepo | undefined\n  >();\n\n  const [, setData] = useState<Data>();\n  const [, setState] = useState<State>(State.Init);\n  const [, setMsg] = useState<string | undefined>();\n\n  walletManager.setActions({\n    viewOpen: setViewOpen,\n    viewWalletRepo: setViewWalletRepo,\n    data: setData,\n    state: setState,\n    message: setMsg,\n  });\n\n  walletManager.walletRepos.forEach((wr) => {\n    wr.setActions({\n      viewOpen: setViewOpen,\n      viewWalletRepo: setViewWalletRepo,\n    });\n    wr.wallets.forEach((w) => {\n      w.setActions({\n        data: setData,\n        state: setState,\n        message: setMsg,\n      });\n    });\n  });\n\n  walletManager.mainWallets.forEach((w) => {\n    w.setActions({\n      data: setData,\n      state: setState,\n      message: setMsg,\n    });\n  });\n\n  useEffect(() => {\n    walletManager.onMounted();\n    return () => {\n      setViewOpen(false);\n      walletManager.onUnmounted();\n    };\n  }, []);\n\n  return (\n    <walletContext.Provider\n      value={{ walletManager, modalProvided: Boolean(ProvidedWalletModal) }}\n    >\n      {ProvidedWalletModal && (\n        <ProvidedWalletModal\n          isOpen={isViewOpen}\n          setOpen={setViewOpen}\n          walletRepo={viewWalletRepo}\n        />\n      )}\n      {children}\n    </walletContext.Provider>\n  );\n};\n","import {\n  ChainWalletBase,\n  ChainWalletContext,\n  WalletStatus,\n} from '@cosmos-kit/core';\n\nexport function getChainWalletContext(\n  chainId: string,\n  wallet?: ChainWalletBase,\n  sync = true\n): ChainWalletContext {\n  function walletAssert(\n    func: ((...params: any[]) => any | undefined) | undefined,\n    params: any[] = [],\n    name: string\n  ) {\n    if (!wallet) {\n      throw new Error(\n        `Wallet is undefined. Please choose a wallet to connect first.`\n      );\n    }\n\n    if (!func) {\n      throw new Error(\n        `Function ${name} not implemented by ${wallet?.walletInfo.prettyName} yet.`\n      );\n    }\n\n    return func(...params);\n  }\n\n  function clientMethodAssert(\n    func: ((...params: any[]) => any | undefined) | undefined,\n    params: any[] = [],\n    name: string\n  ) {\n    if (!wallet) {\n      throw new Error(\n        `Wallet is undefined. Please choose a wallet to connect first.`\n      );\n    }\n\n    if (!wallet?.client) {\n      throw new Error(`Wallet Client is undefined.`);\n    }\n\n    if (!func) {\n      throw new Error(\n        `Function ${name} not implemented by ${wallet?.walletInfo.prettyName} Client yet.`\n      );\n    }\n\n    return func(...params);\n  }\n\n  const status = wallet?.walletStatus || WalletStatus.Disconnected;\n\n  return {\n    chainWallet: wallet,\n\n    chain: wallet?.chainRecord.chain,\n    assets: wallet?.chainRecord.assetList,\n    logoUrl: wallet?.chainLogoUrl,\n    wallet: wallet?.walletInfo,\n    address: wallet?.address,\n    username: wallet?.username,\n    message: wallet ? wallet.message : 'No wallet is connected walletly.',\n    status,\n\n    isWalletDisconnected: status === 'Disconnected',\n    isWalletConnecting: status === 'Connecting',\n    isWalletConnected: status === 'Connected',\n    isWalletRejected: status === 'Rejected',\n    isWalletNotExist: status === 'NotExist',\n    isWalletError: status === 'Error',\n\n    connect: () => walletAssert(wallet?.connect, [void 0, sync], 'connect'),\n    disconnect: () =>\n      walletAssert(wallet?.disconnect, [void 0, sync], 'disconnect'),\n    getRpcEndpoint: (isLazy?: boolean) =>\n      walletAssert(wallet?.getRpcEndpoint, [isLazy], 'getRpcEndpoint'),\n    getRestEndpoint: (isLazy?: boolean) =>\n      walletAssert(wallet?.getRestEndpoint, [isLazy], 'getRestEndpoint'),\n    getStargateClient: () =>\n      walletAssert(wallet?.getStargateClient, [], 'getStargateClient'),\n    getCosmWasmClient: () =>\n      walletAssert(wallet?.getCosmWasmClient, [], 'getCosmWasmClient'),\n    getSigningStargateClient: () =>\n      walletAssert(\n        wallet?.getSigningStargateClient,\n        [],\n        'getSigningStargateClient'\n      ),\n    getSigningCosmWasmClient: () =>\n      walletAssert(\n        wallet?.getSigningCosmWasmClient,\n        [],\n        'getSigningCosmWasmClient'\n      ),\n    getNameService: () =>\n      walletAssert(wallet?.getNameService, [], 'getNameService'),\n\n    estimateFee: (...params: Parameters<ChainWalletContext['estimateFee']>) =>\n      walletAssert(wallet?.estimateFee, params, 'estimateFee'),\n    sign: (...params: Parameters<ChainWalletContext['sign']>) =>\n      walletAssert(wallet?.sign, params, 'sign'),\n    broadcast: (...params: Parameters<ChainWalletContext['broadcast']>) =>\n      walletAssert(wallet?.broadcast, params, 'broadcast'),\n    signAndBroadcast: (\n      ...params: Parameters<ChainWalletContext['signAndBroadcast']>\n    ) => walletAssert(wallet?.signAndBroadcast, params, 'signAndBroadcast'),\n\n    qrUrl: wallet?.client?.qrUrl,\n    appUrl: wallet?.client?.appUrl,\n\n    enable: () =>\n      clientMethodAssert(\n        wallet?.client?.enable.bind(wallet.client),\n        [chainId],\n        'enable'\n      ),\n    suggestToken: (...params: Parameters<ChainWalletContext['suggestToken']>) =>\n      clientMethodAssert(\n        wallet?.client?.suggestToken.bind(wallet.client),\n        [...params],\n        'suggestToken'\n      ),\n    getAccount: () =>\n      clientMethodAssert(\n        wallet?.client?.getAccount.bind(wallet.client),\n        [chainId],\n        'getAccount'\n      ),\n    getOfflineSigner: () =>\n      clientMethodAssert(\n        wallet?.client?.getOfflineSigner.bind(wallet.client),\n        [chainId, wallet?.preferredSignType],\n        'getOfflineSigner'\n      ),\n    getOfflineSignerAmino: () =>\n      clientMethodAssert(\n        wallet?.client?.getOfflineSignerAmino.bind(wallet.client),\n        [chainId],\n        'getOfflineSignerAmino'\n      ),\n    getOfflineSignerDirect: () =>\n      clientMethodAssert(\n        wallet?.client?.getOfflineSignerDirect.bind(wallet.client),\n        [chainId],\n        'getOfflineSignerDirect'\n      ),\n    signAmino: (...params: Parameters<ChainWalletContext['signAmino']>) =>\n      clientMethodAssert(\n        wallet?.client?.signAmino.bind(wallet.client),\n        [chainId, ...params],\n        'signAmino'\n      ),\n    signDirect: (...params: Parameters<ChainWalletContext['signDirect']>) =>\n      clientMethodAssert(\n        wallet?.client?.signDirect.bind(wallet.client),\n        [chainId, ...params],\n        'signDirect'\n      ),\n    signArbitrary: (...params: Parameters<ChainWalletContext['signArbitrary']>) =>\n      clientMethodAssert(\n        wallet?.client?.signArbitrary.bind(wallet.client),\n        [chainId, ...params],\n        'signArbitrary'\n      ),\n    sendTx: (...params: Parameters<ChainWalletContext['sendTx']>) =>\n      clientMethodAssert(\n        wallet?.client?.sendTx.bind(wallet.client),\n        [chainId, ...params],\n        'sendTx'\n      ),\n  };\n}\n","import { ChainWalletContext, ChainName, WalletName } from '@cosmos-kit/core';\nimport React from 'react';\n\nimport { walletContext } from '../provider';\nimport { getChainWalletContext } from '../utils';\n\nexport const useChainWallet = (\n  chainName: ChainName,\n  walletName: WalletName,\n  sync: boolean = true\n): ChainWalletContext => {\n  const context = React.useContext(walletContext);\n\n  if (!context) {\n    throw new Error('You have forgot to use ChainProvider.');\n  }\n\n  const { walletManager } = context;\n\n  const wallet = walletManager.getChainWallet(chainName, walletName);\n  wallet.activate();\n  return getChainWalletContext(wallet.chain.chain_id, wallet, sync);\n};\n","import { ManagerContext } from '@cosmos-kit/core';\nimport React from 'react';\n\nimport { walletContext } from '../provider';\n\nexport const useManager = (): ManagerContext => {\n  const context = React.useContext(walletContext);\n\n  if (!context) {\n    throw new Error('You have forgot to use ChainProvider.');\n  }\n\n  const {\n    walletManager: {\n      mainWallets,\n      chainRecords,\n      walletRepos,\n      defaultNameService,\n      getChainRecord,\n      getWalletRepo,\n      addChains,\n      getChainLogo,\n      getNameService,\n      on,\n      off,\n    },\n  } = context;\n\n  return {\n    chainRecords,\n    walletRepos,\n    mainWallets,\n    defaultNameService,\n    getChainRecord,\n    getWalletRepo,\n    addChains,\n    getChainLogo,\n    getNameService,\n    on,\n    off,\n  };\n};\n","import {\n  getNameServiceRegistryFromName,\n  Mutable,\n  NameService,\n  NameServiceName,\n  State,\n} from '@cosmos-kit/core';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useManager } from './useManager';\n\nexport const useNameService = (\n  name?: NameServiceName\n): Mutable<NameService> => {\n  const [state, setState] = useState<State>(State.Pending);\n  const [ns, setNS] = useState<NameService>();\n  const [msg, setMsg] = useState<string>();\n\n  const { defaultNameService, getNameService } = useManager();\n  const registry = useMemo(\n    () => getNameServiceRegistryFromName(name || defaultNameService),\n    [name]\n  );\n\n  if (!registry) {\n    throw new Error('No such name service: ' + (name || defaultNameService));\n  }\n\n  useEffect(() => {\n    getNameService()\n      .then((ns) => {\n        setNS(ns);\n        setState(State.Done);\n      })\n      .catch((e) => {\n        setMsg((e as Error).message);\n        setState(State.Error);\n      })\n      .finally(() => {\n        if (state === 'Pending') {\n          setState(State.Init);\n        }\n      });\n  }, [name]);\n\n  return {\n    state,\n    data: ns,\n    message: msg,\n  };\n};\n","import { WalletName, WalletContext, WalletStatus } from '@cosmos-kit/core';\nimport React from 'react';\n\nimport { walletContext } from '../provider';\n\nexport const useWallet = (\n  walletName?: WalletName,\n  activeOnly = true\n): WalletContext => {\n  const context = React.useContext(walletContext);\n\n  if (!context) {\n    throw new Error('You have forgot to use ChainProvider.');\n  }\n\n  const { walletManager } = context;\n  const mainWallet = walletName\n    ? walletManager.getMainWallet(walletName)\n    : walletManager.mainWallets.find((w) => w.isActive);\n\n  if (!mainWallet) {\n    return {\n      mainWallet,\n      chainWallets: [],\n      wallet: void 0,\n      status: WalletStatus.Disconnected,\n      message: void 0,\n    };\n  }\n\n  const {\n    walletInfo,\n    getChainWalletList,\n    getGlobalStatusAndMessage,\n  } = mainWallet;\n\n  const [globalStatus, globalMessage] = getGlobalStatusAndMessage(activeOnly);\n\n  return {\n    mainWallet,\n    chainWallets: getChainWalletList(activeOnly),\n    wallet: walletInfo,\n    status: globalStatus,\n    message: globalMessage,\n  };\n};\n","import { State, WalletClientContext, WalletName } from '@cosmos-kit/core';\nimport React, { useMemo } from 'react';\n\nimport { walletContext } from '../provider';\n\nexport const useWalletClient = (\n  walletName?: WalletName\n): WalletClientContext => {\n  const context = React.useContext(walletContext);\n\n  if (!context) {\n    throw new Error('You have forgot to use ChainProvider.');\n  }\n\n  const { walletManager } = context;\n\n  const mainWallet = walletName\n    ? walletManager.getMainWallet(walletName)\n    : walletManager.mainWallets.find((w) => w.isActive);\n\n  if (!mainWallet) {\n    return {\n      client: void 0,\n      status: State.Init,\n      message: void 0,\n    };\n  }\n\n  const { clientMutable } = mainWallet;\n\n  return {\n    client: clientMutable.data,\n    status: clientMutable.state,\n    message: clientMutable.message,\n  };\n};\n"],"mappings":";AACA,OAAOA,YAAW;;;ACAlB;AAAA,EAGE;AAAA,EAMA;AAAA,EAEA;AAAA,OAGK;AACP;AAAA,EACE;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAoGH,SAII,KAJJ;AAlGG,IAAM,gBAAgB,cAGnB,IAAI;AAEP,IAAM,gBAAgB,CAAC;AAAA,EAC5B;AAAA,EACA;AAAA,EACA;AAAA,EACA,aAAa;AAAA,EACb,cAAc;AAAA,EACd,qBAAqB;AAAA,EACrB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,WAAW;AAAA,EACX;AACF,MAaM;AACJ,QAAM,SAAS,QAAQ,MAAM,IAAI,OAAO,QAAQ,GAAG,CAAC,CAAC;AACrD,QAAM,gBAAgB;AAAA,IACpB,MACE,IAAI;AAAA,MACF;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,IACF,CAAC;AAAA,EACH;AAEA,QAAM,CAAC,YAAY,WAAW,IAAI,SAAkB,KAAK;AACzD,QAAM,CAAC,gBAAgB,iBAAiB,IAAI,SAE1C;AAEF,QAAM,CAAC,EAAE,OAAO,IAAI,SAAe;AACnC,QAAM,CAAC,EAAE,QAAQ,IAAI,SAAgB,MAAM,IAAI;AAC/C,QAAM,CAAC,EAAE,MAAM,IAAI,SAA6B;AAEhD,gBAAc,WAAW;AAAA,IACvB,UAAU;AAAA,IACV,gBAAgB;AAAA,IAChB,MAAM;AAAA,IACN,OAAO;AAAA,IACP,SAAS;AAAA,EACX,CAAC;AAED,gBAAc,YAAY,QAAQ,CAAC,OAAO;AACxC,OAAG,WAAW;AAAA,MACZ,UAAU;AAAA,MACV,gBAAgB;AAAA,IAClB,CAAC;AACD,OAAG,QAAQ,QAAQ,CAAC,MAAM;AACxB,QAAE,WAAW;AAAA,QACX,MAAM;AAAA,QACN,OAAO;AAAA,QACP,SAAS;AAAA,MACX,CAAC;AAAA,IACH,CAAC;AAAA,EACH,CAAC;AAED,gBAAc,YAAY,QAAQ,CAAC,MAAM;AACvC,MAAE,WAAW;AAAA,MACX,MAAM;AAAA,MACN,OAAO;AAAA,MACP,SAAS;AAAA,IACX,CAAC;AAAA,EACH,CAAC;AAED,YAAU,MAAM;AACd,kBAAc,UAAU;AACxB,WAAO,MAAM;AACX,kBAAY,KAAK;AACjB,oBAAc,YAAY;AAAA,IAC5B;AAAA,EACF,GAAG,CAAC,CAAC;AAEL,SACE;AAAA,IAAC,cAAc;AAAA,IAAd;AAAA,MACC,OAAO,EAAE,eAAe,eAAe,QAAQ,mBAAmB,EAAE;AAAA,MAEnE;AAAA,+BACC;AAAA,UAAC;AAAA;AAAA,YACC,QAAQ;AAAA,YACR,SAAS;AAAA,YACT,YAAY;AAAA;AAAA,QACd;AAAA,QAED;AAAA;AAAA;AAAA,EACH;AAEJ;;;ACvIA;AAAA,EAGE;AAAA,OACK;AAEA,SAAS,sBACd,SACA,QACA,OAAO,MACa;AACpB,WAAS,aACP,MACA,SAAgB,CAAC,GACjB,MACA;AACA,QAAI,CAAC,QAAQ;AACX,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,MAAM;AACT,YAAM,IAAI;AAAA,QACR,YAAY,2BAA2B,QAAQ,WAAW;AAAA,MAC5D;AAAA,IACF;AAEA,WAAO,KAAK,GAAG,MAAM;AAAA,EACvB;AAEA,WAAS,mBACP,MACA,SAAgB,CAAC,GACjB,MACA;AACA,QAAI,CAAC,QAAQ;AACX,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,QAAQ,QAAQ;AACnB,YAAM,IAAI,MAAM,6BAA6B;AAAA,IAC/C;AAEA,QAAI,CAAC,MAAM;AACT,YAAM,IAAI;AAAA,QACR,YAAY,2BAA2B,QAAQ,WAAW;AAAA,MAC5D;AAAA,IACF;AAEA,WAAO,KAAK,GAAG,MAAM;AAAA,EACvB;AAEA,QAAM,SAAS,QAAQ,gBAAgB,aAAa;AAEpD,SAAO;AAAA,IACL,aAAa;AAAA,IAEb,OAAO,QAAQ,YAAY;AAAA,IAC3B,QAAQ,QAAQ,YAAY;AAAA,IAC5B,SAAS,QAAQ;AAAA,IACjB,QAAQ,QAAQ;AAAA,IAChB,SAAS,QAAQ;AAAA,IACjB,UAAU,QAAQ;AAAA,IAClB,SAAS,SAAS,OAAO,UAAU;AAAA,IACnC;AAAA,IAEA,sBAAsB,WAAW;AAAA,IACjC,oBAAoB,WAAW;AAAA,IAC/B,mBAAmB,WAAW;AAAA,IAC9B,kBAAkB,WAAW;AAAA,IAC7B,kBAAkB,WAAW;AAAA,IAC7B,eAAe,WAAW;AAAA,IAE1B,SAAS,MAAM,aAAa,QAAQ,SAAS,CAAC,QAAQ,IAAI,GAAG,SAAS;AAAA,IACtE,YAAY,MACV,aAAa,QAAQ,YAAY,CAAC,QAAQ,IAAI,GAAG,YAAY;AAAA,IAC/D,gBAAgB,CAAC,WACf,aAAa,QAAQ,gBAAgB,CAAC,MAAM,GAAG,gBAAgB;AAAA,IACjE,iBAAiB,CAAC,WAChB,aAAa,QAAQ,iBAAiB,CAAC,MAAM,GAAG,iBAAiB;AAAA,IACnE,mBAAmB,MACjB,aAAa,QAAQ,mBAAmB,CAAC,GAAG,mBAAmB;AAAA,IACjE,mBAAmB,MACjB,aAAa,QAAQ,mBAAmB,CAAC,GAAG,mBAAmB;AAAA,IACjE,0BAA0B,MACxB;AAAA,MACE,QAAQ;AAAA,MACR,CAAC;AAAA,MACD;AAAA,IACF;AAAA,IACF,0BAA0B,MACxB;AAAA,MACE,QAAQ;AAAA,MACR,CAAC;AAAA,MACD;AAAA,IACF;AAAA,IACF,gBAAgB,MACd,aAAa,QAAQ,gBAAgB,CAAC,GAAG,gBAAgB;AAAA,IAE3D,aAAa,IAAI,WACf,aAAa,QAAQ,aAAa,QAAQ,aAAa;AAAA,IACzD,MAAM,IAAI,WACR,aAAa,QAAQ,MAAM,QAAQ,MAAM;AAAA,IAC3C,WAAW,IAAI,WACb,aAAa,QAAQ,WAAW,QAAQ,WAAW;AAAA,IACrD,kBAAkB,IACb,WACA,aAAa,QAAQ,kBAAkB,QAAQ,kBAAkB;AAAA,IAEtE,OAAO,QAAQ,QAAQ;AAAA,IACvB,QAAQ,QAAQ,QAAQ;AAAA,IAExB,QAAQ,MACN;AAAA,MACE,QAAQ,QAAQ,OAAO,KAAK,OAAO,MAAM;AAAA,MACzC,CAAC,OAAO;AAAA,MACR;AAAA,IACF;AAAA,IACF,cAAc,IAAI,WAChB;AAAA,MACE,QAAQ,QAAQ,aAAa,KAAK,OAAO,MAAM;AAAA,MAC/C,CAAC,GAAG,MAAM;AAAA,MACV;AAAA,IACF;AAAA,IACF,YAAY,MACV;AAAA,MACE,QAAQ,QAAQ,WAAW,KAAK,OAAO,MAAM;AAAA,MAC7C,CAAC,OAAO;AAAA,MACR;AAAA,IACF;AAAA,IACF,kBAAkB,MAChB;AAAA,MACE,QAAQ,QAAQ,iBAAiB,KAAK,OAAO,MAAM;AAAA,MACnD,CAAC,SAAS,QAAQ,iBAAiB;AAAA,MACnC;AAAA,IACF;AAAA,IACF,uBAAuB,MACrB;AAAA,MACE,QAAQ,QAAQ,sBAAsB,KAAK,OAAO,MAAM;AAAA,MACxD,CAAC,OAAO;AAAA,MACR;AAAA,IACF;AAAA,IACF,wBAAwB,MACtB;AAAA,MACE,QAAQ,QAAQ,uBAAuB,KAAK,OAAO,MAAM;AAAA,MACzD,CAAC,OAAO;AAAA,MACR;AAAA,IACF;AAAA,IACF,WAAW,IAAI,WACb;AAAA,MACE,QAAQ,QAAQ,UAAU,KAAK,OAAO,MAAM;AAAA,MAC5C,CAAC,SAAS,GAAG,MAAM;AAAA,MACnB;AAAA,IACF;AAAA,IACF,YAAY,IAAI,WACd;AAAA,MACE,QAAQ,QAAQ,WAAW,KAAK,OAAO,MAAM;AAAA,MAC7C,CAAC,SAAS,GAAG,MAAM;AAAA,MACnB;AAAA,IACF;AAAA,IACF,eAAe,IAAI,WACjB;AAAA,MACE,QAAQ,QAAQ,cAAc,KAAK,OAAO,MAAM;AAAA,MAChD,CAAC,SAAS,GAAG,MAAM;AAAA,MACnB;AAAA,IACF;AAAA,IACF,QAAQ,IAAI,WACV;AAAA,MACE,QAAQ,QAAQ,OAAO,KAAK,OAAO,MAAM;AAAA,MACzC,CAAC,SAAS,GAAG,MAAM;AAAA,MACnB;AAAA,IACF;AAAA,EACJ;AACF;;;AF1KO,IAAM,WAAW,CACtB,WACA,OAAgB,SACC;AACjB,QAAM,UAAUC,OAAM,WAAW,aAAa;AAE9C,MAAI,CAAC,SAAS;AACZ,UAAM,IAAI,MAAM,uCAAuC;AAAA,EACzD;AAEA,QAAM,EAAE,eAAe,cAAc,IAAI;AAEzC,MAAI,CAAC,eAAe;AAClB,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AAEA,QAAM,aAAa,cAAc,cAAc,SAAS;AACxD,aAAW,SAAS;AACpB,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,aAAa,EAAE,OAAO,UAAU;AAAA,IAChC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAI;AAEJ,QAAM,qBAAqB;AAAA,IACzB,MAAM;AAAA,IACN;AAAA,IACA;AAAA,EACF;AAEA,SAAO;AAAA,IACL,GAAG;AAAA,IACH;AAAA,IACA;AAAA,IACA,QAAQ;AAAA,IACR;AAAA,IACA;AAAA,IACA,SAAS,MAAM,QAAQ,QAAQ,IAAI;AAAA,IACnC,YAAY,MAAM,WAAW,QAAQ,IAAI;AAAA,IACzC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;;;AG5DA,OAAOC,YAAW;AAKX,IAAM,iBAAiB,CAC5B,WACA,YACA,OAAgB,SACO;AACvB,QAAM,UAAUC,OAAM,WAAW,aAAa;AAE9C,MAAI,CAAC,SAAS;AACZ,UAAM,IAAI,MAAM,uCAAuC;AAAA,EACzD;AAEA,QAAM,EAAE,cAAc,IAAI;AAE1B,QAAM,SAAS,cAAc,eAAe,WAAW,UAAU;AACjE,SAAO,SAAS;AAChB,SAAO,sBAAsB,OAAO,MAAM,UAAU,QAAQ,IAAI;AAClE;;;ACrBA,OAAOC,YAAW;AAIX,IAAM,aAAa,MAAsB;AAC9C,QAAM,UAAUC,OAAM,WAAW,aAAa;AAE9C,MAAI,CAAC,SAAS;AACZ,UAAM,IAAI,MAAM,uCAAuC;AAAA,EACzD;AAEA,QAAM;AAAA,IACJ,eAAe;AAAA,MACb;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF,IAAI;AAEJ,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;;;ACzCA;AAAA,EACE;AAAA,EAIA,SAAAC;AAAA,OACK;AACP,SAAgB,aAAAC,YAAW,WAAAC,UAAS,YAAAC,iBAAgB;AAG7C,IAAM,iBAAiB,CAC5B,SACyB;AACzB,QAAM,CAAC,OAAO,QAAQ,IAAIC,UAAgBC,OAAM,OAAO;AACvD,QAAM,CAAC,IAAI,KAAK,IAAID,UAAsB;AAC1C,QAAM,CAAC,KAAK,MAAM,IAAIA,UAAiB;AAEvC,QAAM,EAAE,oBAAoB,eAAe,IAAI,WAAW;AAC1D,QAAM,WAAWE;AAAA,IACf,MAAM,+BAA+B,QAAQ,kBAAkB;AAAA,IAC/D,CAAC,IAAI;AAAA,EACP;AAEA,MAAI,CAAC,UAAU;AACb,UAAM,IAAI,MAAM,4BAA4B,QAAQ,mBAAmB;AAAA,EACzE;AAEA,EAAAC,WAAU,MAAM;AACd,mBAAe,EACZ,KAAK,CAACC,QAAO;AACZ,YAAMA,GAAE;AACR,eAASH,OAAM,IAAI;AAAA,IACrB,CAAC,EACA,MAAM,CAAC,MAAM;AACZ,aAAQ,EAAY,OAAO;AAC3B,eAASA,OAAM,KAAK;AAAA,IACtB,CAAC,EACA,QAAQ,MAAM;AACb,UAAI,UAAU,WAAW;AACvB,iBAASA,OAAM,IAAI;AAAA,MACrB;AAAA,IACF,CAAC;AAAA,EACL,GAAG,CAAC,IAAI,CAAC;AAET,SAAO;AAAA,IACL;AAAA,IACA,MAAM;AAAA,IACN,SAAS;AAAA,EACX;AACF;;;ACjDA,SAAoC,gBAAAI,qBAAoB;AACxD,OAAOC,YAAW;AAIX,IAAM,YAAY,CACvB,YACA,aAAa,SACK;AAClB,QAAM,UAAUC,OAAM,WAAW,aAAa;AAE9C,MAAI,CAAC,SAAS;AACZ,UAAM,IAAI,MAAM,uCAAuC;AAAA,EACzD;AAEA,QAAM,EAAE,cAAc,IAAI;AAC1B,QAAM,aAAa,aACf,cAAc,cAAc,UAAU,IACtC,cAAc,YAAY,KAAK,CAAC,MAAM,EAAE,QAAQ;AAEpD,MAAI,CAAC,YAAY;AACf,WAAO;AAAA,MACL;AAAA,MACA,cAAc,CAAC;AAAA,MACf,QAAQ;AAAA,MACR,QAAQC,cAAa;AAAA,MACrB,SAAS;AAAA,IACX;AAAA,EACF;AAEA,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAI;AAEJ,QAAM,CAAC,cAAc,aAAa,IAAI,0BAA0B,UAAU;AAE1E,SAAO;AAAA,IACL;AAAA,IACA,cAAc,mBAAmB,UAAU;AAAA,IAC3C,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,SAAS;AAAA,EACX;AACF;;;AC7CA,SAAS,SAAAC,cAA8C;AACvD,OAAOC,YAAwB;AAIxB,IAAM,kBAAkB,CAC7B,eACwB;AACxB,QAAM,UAAUC,OAAM,WAAW,aAAa;AAE9C,MAAI,CAAC,SAAS;AACZ,UAAM,IAAI,MAAM,uCAAuC;AAAA,EACzD;AAEA,QAAM,EAAE,cAAc,IAAI;AAE1B,QAAM,aAAa,aACf,cAAc,cAAc,UAAU,IACtC,cAAc,YAAY,KAAK,CAAC,MAAM,EAAE,QAAQ;AAEpD,MAAI,CAAC,YAAY;AACf,WAAO;AAAA,MACL,QAAQ;AAAA,MACR,QAAQC,OAAM;AAAA,MACd,SAAS;AAAA,IACX;AAAA,EACF;AAEA,QAAM,EAAE,cAAc,IAAI;AAE1B,SAAO;AAAA,IACL,QAAQ,cAAc;AAAA,IACtB,QAAQ,cAAc;AAAA,IACtB,SAAS,cAAc;AAAA,EACzB;AACF;","names":["React","React","React","React","React","React","State","useEffect","useMemo","useState","useState","State","useMemo","useEffect","ns","WalletStatus","React","React","WalletStatus","State","React","React","State"]}