{"mappings":"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","sources":["packages/react-lite/src/index.ts","packages/react-lite/src/hooks/index.ts","packages/react-lite/src/hooks/useChain.ts","packages/react-lite/src/provider.tsx","packages/react-lite/src/utils.ts","packages/react-lite/src/hooks/useChainWallet.ts","packages/react-lite/src/hooks/useManager.ts","packages/react-lite/src/hooks/useNameService.ts","packages/react-lite/src/hooks/useWallet.ts","packages/react-lite/src/hooks/useWalletClient.ts"],"sourcesContent":["export * from './hooks';\nexport * from './provider';\n","export * from './useChain';\nexport * from './useChainWallet';\nexport * from './useManager';\nexport * from './useNameService';\nexport * from './useWallet';\nexport * from './useWalletClient';\n","import { ChainContext, ChainName } from '@cosmos-kit/core';\nimport React from 'react';\n\nimport { walletContext } from '../provider';\nimport { getChainWalletContext } from '../utils';\n\nexport const useChain = (\n  chainName: ChainName,\n  sync: boolean = true\n): ChainContext => {\n  const context = React.useContext(walletContext);\n\n  if (!context) {\n    throw new Error('You have forgot to use ChainProvider.');\n  }\n\n  const { walletManager, modalProvided } = context;\n\n  if (!modalProvided) {\n    throw new Error(\n      'You have to provide `walletModal` to use `useChain`, or use `useChainWallet` instead.'\n    );\n  }\n\n  const walletRepo = walletManager.getWalletRepo(chainName);\n  walletRepo.activate();\n  const {\n    connect,\n    disconnect,\n    openView,\n    closeView,\n    current,\n    chainRecord: { chain, assetList },\n    getRpcEndpoint,\n    getRestEndpoint,\n    getStargateClient,\n    getCosmWasmClient,\n    getNameService,\n  } = walletRepo;\n\n  const chainWalletContext = getChainWalletContext(\n    chain.chain_id,\n    current,\n    sync\n  );\n\n  return {\n    ...chainWalletContext,\n    walletRepo,\n    chain,\n    assets: assetList,\n    openView,\n    closeView,\n    connect: () => connect(void 0, sync),\n    disconnect: () => disconnect(void 0, sync),\n    getRpcEndpoint,\n    getRestEndpoint,\n    getStargateClient,\n    getCosmWasmClient,\n    getNameService,\n  };\n};\n","import { AssetList, Chain } from '@chain-registry/types';\nimport {\n  Data,\n  EndpointOptions,\n  Logger,\n  LogLevel,\n  MainWalletBase,\n  NameServiceName,\n  SessionOptions,\n  SignerOptions,\n  State,\n  WalletConnectOptions,\n  WalletManager,\n  WalletModalProps,\n  WalletRepo,\n} from '@cosmos-kit/core';\nimport React, {\n  createContext,\n  ReactNode,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\n\nexport const walletContext = createContext<{\n  walletManager: WalletManager;\n  modalProvided: boolean;\n} | null>(null);\n\nexport const ChainProvider = ({\n  chains,\n  assetLists,\n  wallets,\n  walletModal: ProvidedWalletModal,\n  throwErrors = false,\n  defaultNameService = 'icns',\n  walletConnectOptions,\n  signerOptions,\n  endpointOptions,\n  sessionOptions,\n  logLevel = 'WARN',\n  children,\n}: {\n  chains: Chain[];\n  assetLists: AssetList[];\n  wallets: MainWalletBase[];\n  walletModal?: (props: WalletModalProps) => JSX.Element;\n  throwErrors?: boolean;\n  defaultNameService?: NameServiceName;\n  walletConnectOptions?: WalletConnectOptions; // SignClientOptions is required if using wallet connect v2\n  signerOptions?: SignerOptions;\n  endpointOptions?: EndpointOptions;\n  sessionOptions?: SessionOptions;\n  logLevel?: LogLevel;\n  children: ReactNode;\n}) => {\n  const logger = useMemo(() => new Logger(logLevel), []);\n  const walletManager = useMemo(\n    () =>\n      new WalletManager(\n        chains,\n        assetLists,\n        wallets,\n        logger,\n        throwErrors,\n        defaultNameService,\n        walletConnectOptions,\n        signerOptions,\n        endpointOptions,\n        sessionOptions\n      ),\n    []\n  );\n\n  const [isViewOpen, setViewOpen] = useState<boolean>(false);\n  const [viewWalletRepo, setViewWalletRepo] = useState<\n    WalletRepo | undefined\n  >();\n\n  const [, setData] = useState<Data>();\n  const [, setState] = useState<State>(State.Init);\n  const [, setMsg] = useState<string | undefined>();\n\n  walletManager.setActions({\n    viewOpen: setViewOpen,\n    viewWalletRepo: setViewWalletRepo,\n    data: setData,\n    state: setState,\n    message: setMsg,\n  });\n\n  walletManager.walletRepos.forEach((wr) => {\n    wr.setActions({\n      viewOpen: setViewOpen,\n      viewWalletRepo: setViewWalletRepo,\n    });\n    wr.wallets.forEach((w) => {\n      w.setActions({\n        data: setData,\n        state: setState,\n        message: setMsg,\n      });\n    });\n  });\n\n  walletManager.mainWallets.forEach((w) => {\n    w.setActions({\n      data: setData,\n      state: setState,\n      message: setMsg,\n    });\n  });\n\n  useEffect(() => {\n    walletManager.onMounted();\n    return () => {\n      setViewOpen(false);\n      walletManager.onUnmounted();\n    };\n  }, []);\n\n  return (\n    <walletContext.Provider\n      value={{ walletManager, modalProvided: Boolean(ProvidedWalletModal) }}\n    >\n      {ProvidedWalletModal && (\n        <ProvidedWalletModal\n          isOpen={isViewOpen}\n          setOpen={setViewOpen}\n          walletRepo={viewWalletRepo}\n        />\n      )}\n      {children}\n    </walletContext.Provider>\n  );\n};\n","import {\n  ChainWalletBase,\n  ChainWalletContext,\n  WalletStatus,\n} from '@cosmos-kit/core';\n\nexport function getChainWalletContext(\n  chainId: string,\n  wallet?: ChainWalletBase,\n  sync = true\n): ChainWalletContext {\n  function walletAssert(\n    func: ((...params: any[]) => any | undefined) | undefined,\n    params: any[] = [],\n    name: string\n  ) {\n    if (!wallet) {\n      throw new Error(\n        `Wallet is undefined. Please choose a wallet to connect first.`\n      );\n    }\n\n    if (!func) {\n      throw new Error(\n        `Function ${name} not implemented by ${wallet?.walletInfo.prettyName} yet.`\n      );\n    }\n\n    return func(...params);\n  }\n\n  function clientMethodAssert(\n    func: ((...params: any[]) => any | undefined) | undefined,\n    params: any[] = [],\n    name: string\n  ) {\n    if (!wallet) {\n      throw new Error(\n        `Wallet is undefined. Please choose a wallet to connect first.`\n      );\n    }\n\n    if (!wallet?.client) {\n      throw new Error(`Wallet Client is undefined.`);\n    }\n\n    if (!func) {\n      throw new Error(\n        `Function ${name} not implemented by ${wallet?.walletInfo.prettyName} Client yet.`\n      );\n    }\n\n    return func(...params);\n  }\n\n  const status = wallet?.walletStatus || WalletStatus.Disconnected;\n\n  return {\n    chainWallet: wallet,\n\n    chain: wallet?.chainRecord.chain,\n    assets: wallet?.chainRecord.assetList,\n    logoUrl: wallet?.chainLogoUrl,\n    wallet: wallet?.walletInfo,\n    address: wallet?.address,\n    username: wallet?.username,\n    message: wallet ? wallet.message : 'No wallet is connected walletly.',\n    status,\n\n    isWalletDisconnected: status === 'Disconnected',\n    isWalletConnecting: status === 'Connecting',\n    isWalletConnected: status === 'Connected',\n    isWalletRejected: status === 'Rejected',\n    isWalletNotExist: status === 'NotExist',\n    isWalletError: status === 'Error',\n\n    connect: () => walletAssert(wallet?.connect, [void 0, sync], 'connect'),\n    disconnect: () =>\n      walletAssert(wallet?.disconnect, [void 0, sync], 'disconnect'),\n    getRpcEndpoint: (isLazy?: boolean) =>\n      walletAssert(wallet?.getRpcEndpoint, [isLazy], 'getRpcEndpoint'),\n    getRestEndpoint: (isLazy?: boolean) =>\n      walletAssert(wallet?.getRestEndpoint, [isLazy], 'getRestEndpoint'),\n    getStargateClient: () =>\n      walletAssert(wallet?.getStargateClient, [], 'getStargateClient'),\n    getCosmWasmClient: () =>\n      walletAssert(wallet?.getCosmWasmClient, [], 'getCosmWasmClient'),\n    getSigningStargateClient: () =>\n      walletAssert(\n        wallet?.getSigningStargateClient,\n        [],\n        'getSigningStargateClient'\n      ),\n    getSigningCosmWasmClient: () =>\n      walletAssert(\n        wallet?.getSigningCosmWasmClient,\n        [],\n        'getSigningCosmWasmClient'\n      ),\n    getNameService: () =>\n      walletAssert(wallet?.getNameService, [], 'getNameService'),\n\n    estimateFee: (...params: Parameters<ChainWalletContext['estimateFee']>) =>\n      walletAssert(wallet?.estimateFee, params, 'estimateFee'),\n    sign: (...params: Parameters<ChainWalletContext['sign']>) =>\n      walletAssert(wallet?.sign, params, 'sign'),\n    broadcast: (...params: Parameters<ChainWalletContext['broadcast']>) =>\n      walletAssert(wallet?.broadcast, params, 'broadcast'),\n    signAndBroadcast: (\n      ...params: Parameters<ChainWalletContext['signAndBroadcast']>\n    ) => walletAssert(wallet?.signAndBroadcast, params, 'signAndBroadcast'),\n\n    qrUrl: wallet?.client?.qrUrl,\n    appUrl: wallet?.client?.appUrl,\n\n    enable: () =>\n      clientMethodAssert(\n        wallet?.client?.enable.bind(wallet.client),\n        [chainId],\n        'enable'\n      ),\n    suggestToken: (...params: Parameters<ChainWalletContext['suggestToken']>) =>\n      clientMethodAssert(\n        wallet?.client?.suggestToken.bind(wallet.client),\n        [...params],\n        'suggestToken'\n      ),\n    getAccount: () =>\n      clientMethodAssert(\n        wallet?.client?.getAccount.bind(wallet.client),\n        [chainId],\n        'getAccount'\n      ),\n    getOfflineSigner: () =>\n      clientMethodAssert(\n        wallet?.client?.getOfflineSigner.bind(wallet.client),\n        [chainId, wallet?.preferredSignType],\n        'getOfflineSigner'\n      ),\n    getOfflineSignerAmino: () =>\n      clientMethodAssert(\n        wallet?.client?.getOfflineSignerAmino.bind(wallet.client),\n        [chainId],\n        'getOfflineSignerAmino'\n      ),\n    getOfflineSignerDirect: () =>\n      clientMethodAssert(\n        wallet?.client?.getOfflineSignerDirect.bind(wallet.client),\n        [chainId],\n        'getOfflineSignerDirect'\n      ),\n    signAmino: (...params: Parameters<ChainWalletContext['signAmino']>) =>\n      clientMethodAssert(\n        wallet?.client?.signAmino.bind(wallet.client),\n        [chainId, ...params],\n        'signAmino'\n      ),\n    signDirect: (...params: Parameters<ChainWalletContext['signDirect']>) =>\n      clientMethodAssert(\n        wallet?.client?.signDirect.bind(wallet.client),\n        [chainId, ...params],\n        'signDirect'\n      ),\n    sendTx: (...params: Parameters<ChainWalletContext['sendTx']>) =>\n      clientMethodAssert(\n        wallet?.client?.sendTx.bind(wallet.client),\n        [chainId, ...params],\n        'sendTx'\n      ),\n  };\n}\n","import { ChainWalletContext, ChainName, WalletName } from '@cosmos-kit/core';\nimport React from 'react';\n\nimport { walletContext } from '../provider';\nimport { getChainWalletContext } from '../utils';\n\nexport const useChainWallet = (\n  chainName: ChainName,\n  walletName: WalletName,\n  sync: boolean = true\n): ChainWalletContext => {\n  const context = React.useContext(walletContext);\n\n  if (!context) {\n    throw new Error('You have forgot to use ChainProvider.');\n  }\n\n  const { walletManager } = context;\n\n  const wallet = walletManager.getChainWallet(chainName, walletName);\n  wallet.activate();\n  return getChainWalletContext(wallet.chain.chain_id, wallet, sync);\n};\n","import { ManagerContext } from '@cosmos-kit/core';\nimport React from 'react';\n\nimport { walletContext } from '../provider';\n\nexport const useManager = (): ManagerContext => {\n  const context = React.useContext(walletContext);\n\n  if (!context) {\n    throw new Error('You have forgot to use ChainProvider.');\n  }\n\n  const {\n    walletManager: {\n      mainWallets,\n      chainRecords,\n      walletRepos,\n      defaultNameService,\n      getChainRecord,\n      getWalletRepo,\n      addChains,\n      getChainLogo,\n      getNameService,\n      on,\n      off,\n    },\n  } = context;\n\n  return {\n    chainRecords,\n    walletRepos,\n    mainWallets,\n    defaultNameService,\n    getChainRecord,\n    getWalletRepo,\n    addChains,\n    getChainLogo,\n    getNameService,\n    on,\n    off,\n  };\n};\n","import {\n  getNameServiceRegistryFromName,\n  Mutable,\n  NameService,\n  NameServiceName,\n  State,\n} from '@cosmos-kit/core';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useManager } from './useManager';\n\nexport const useNameService = (\n  name?: NameServiceName\n): Mutable<NameService> => {\n  const [state, setState] = useState<State>(State.Pending);\n  const [ns, setNS] = useState<NameService>();\n  const [msg, setMsg] = useState<string>();\n\n  const { defaultNameService, getNameService } = useManager();\n  const registry = useMemo(\n    () => getNameServiceRegistryFromName(name || defaultNameService),\n    [name]\n  );\n\n  if (!registry) {\n    throw new Error('No such name service: ' + (name || defaultNameService));\n  }\n\n  useEffect(() => {\n    getNameService()\n      .then((ns) => {\n        setNS(ns);\n        setState(State.Done);\n      })\n      .catch((e) => {\n        setMsg((e as Error).message);\n        setState(State.Error);\n      })\n      .finally(() => {\n        if (state === 'Pending') {\n          setState(State.Init);\n        }\n      });\n  }, [name]);\n\n  return {\n    state,\n    data: ns,\n    message: msg,\n  };\n};\n","import { WalletName, WalletContext, WalletStatus } from '@cosmos-kit/core';\nimport React from 'react';\n\nimport { walletContext } from '../provider';\n\nexport const useWallet = (\n  walletName?: WalletName,\n  activeOnly = true\n): WalletContext => {\n  const context = React.useContext(walletContext);\n\n  if (!context) {\n    throw new Error('You have forgot to use ChainProvider.');\n  }\n\n  const { walletManager } = context;\n  const mainWallet = walletName\n    ? walletManager.getMainWallet(walletName)\n    : walletManager.mainWallets.find((w) => w.isActive);\n\n  if (!mainWallet) {\n    return {\n      mainWallet,\n      chainWallets: [],\n      wallet: void 0,\n      status: WalletStatus.Disconnected,\n      message: void 0,\n    };\n  }\n\n  const {\n    walletInfo,\n    getChainWalletList,\n    getGlobalStatusAndMessage,\n  } = mainWallet;\n\n  const [globalStatus, globalMessage] = getGlobalStatusAndMessage(activeOnly);\n\n  return {\n    mainWallet,\n    chainWallets: getChainWalletList(activeOnly),\n    wallet: walletInfo,\n    status: globalStatus,\n    message: globalMessage,\n  };\n};\n","import { State, WalletClientContext, WalletName } from '@cosmos-kit/core';\nimport React, { useMemo } from 'react';\n\nimport { walletContext } from '../provider';\n\nexport const useWalletClient = (\n  walletName?: WalletName\n): WalletClientContext => {\n  const context = React.useContext(walletContext);\n\n  if (!context) {\n    throw new Error('You have forgot to use ChainProvider.');\n  }\n\n  const { walletManager } = context;\n\n  const mainWallet = walletName\n    ? walletManager.getMainWallet(walletName)\n    : walletManager.mainWallets.find((w) => w.isActive);\n\n  if (!mainWallet) {\n    return {\n      client: void 0,\n      status: State.Init,\n      message: void 0,\n    };\n  }\n\n  const { clientMutable } = mainWallet;\n\n  return {\n    client: clientMutable.data,\n    status: clientMutable.state,\n    message: clientMutable.message,\n  };\n};\n"],"names":[],"version":3,"file":"cosmos-kit-react-lite.esm.js.map"}