{"version":3,"sources":["../../src/hooks/useNameService.ts","../../src/hooks/useManager.ts","../../src/provider.tsx"],"sourcesContent":["import {\n  getNameServiceRegistryFromName,\n  Mutable,\n  NameService,\n  NameServiceName,\n  State,\n} from '@cosmos-kit/core';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useManager } from './useManager';\n\nexport const useNameService = (\n  name?: NameServiceName\n): Mutable<NameService> => {\n  const [state, setState] = useState<State>(State.Pending);\n  const [ns, setNS] = useState<NameService>();\n  const [msg, setMsg] = useState<string>();\n\n  const { defaultNameService, getNameService } = useManager();\n  const registry = useMemo(\n    () => getNameServiceRegistryFromName(name || defaultNameService),\n    [name]\n  );\n\n  if (!registry) {\n    throw new Error('No such name service: ' + (name || defaultNameService));\n  }\n\n  useEffect(() => {\n    getNameService()\n      .then((ns) => {\n        setNS(ns);\n        setState(State.Done);\n      })\n      .catch((e) => {\n        setMsg((e as Error).message);\n        setState(State.Error);\n      })\n      .finally(() => {\n        if (state === 'Pending') {\n          setState(State.Init);\n        }\n      });\n  }, [name]);\n\n  return {\n    state,\n    data: ns,\n    message: msg,\n  };\n};\n","import { ManagerContext } from '@cosmos-kit/core';\nimport React from 'react';\n\nimport { walletContext } from '../provider';\n\nexport const useManager = (): ManagerContext => {\n  const context = React.useContext(walletContext);\n\n  if (!context) {\n    throw new Error('You have forgot to use ChainProvider.');\n  }\n\n  const {\n    walletManager: {\n      mainWallets,\n      chainRecords,\n      walletRepos,\n      defaultNameService,\n      getChainRecord,\n      getWalletRepo,\n      addChains,\n      getChainLogo,\n      getNameService,\n      on,\n      off,\n    },\n  } = context;\n\n  return {\n    chainRecords,\n    walletRepos,\n    mainWallets,\n    defaultNameService,\n    getChainRecord,\n    getWalletRepo,\n    addChains,\n    getChainLogo,\n    getNameService,\n    on,\n    off,\n  };\n};\n","import { AssetList, Chain } from '@chain-registry/types';\nimport {\n  Data,\n  EndpointOptions,\n  Logger,\n  LogLevel,\n  MainWalletBase,\n  NameServiceName,\n  SessionOptions,\n  SignerOptions,\n  State,\n  WalletConnectOptions,\n  WalletManager,\n  WalletModalProps,\n  WalletRepo,\n} from '@cosmos-kit/core';\nimport React, {\n  createContext,\n  ReactNode,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\n\nexport const walletContext = createContext<{\n  walletManager: WalletManager;\n  modalProvided: boolean;\n} | null>(null);\n\nexport const ChainProvider = ({\n  chains,\n  assetLists,\n  wallets,\n  walletModal: ProvidedWalletModal,\n  throwErrors = false,\n  defaultNameService = 'icns',\n  walletConnectOptions,\n  signerOptions,\n  endpointOptions,\n  sessionOptions,\n  logLevel = 'WARN',\n  children,\n}: {\n  chains: Chain[];\n  assetLists: AssetList[];\n  wallets: MainWalletBase[];\n  walletModal?: (props: WalletModalProps) => JSX.Element;\n  throwErrors?: boolean;\n  defaultNameService?: NameServiceName;\n  walletConnectOptions?: WalletConnectOptions; // SignClientOptions is required if using wallet connect v2\n  signerOptions?: SignerOptions;\n  endpointOptions?: EndpointOptions;\n  sessionOptions?: SessionOptions;\n  logLevel?: LogLevel;\n  children: ReactNode;\n}) => {\n  const logger = useMemo(() => new Logger(logLevel), []);\n  const walletManager = useMemo(\n    () =>\n      new WalletManager(\n        chains,\n        assetLists,\n        wallets,\n        logger,\n        throwErrors,\n        defaultNameService,\n        walletConnectOptions,\n        signerOptions,\n        endpointOptions,\n        sessionOptions\n      ),\n    []\n  );\n\n  const [isViewOpen, setViewOpen] = useState<boolean>(false);\n  const [viewWalletRepo, setViewWalletRepo] = useState<\n    WalletRepo | undefined\n  >();\n\n  const [, setData] = useState<Data>();\n  const [, setState] = useState<State>(State.Init);\n  const [, setMsg] = useState<string | undefined>();\n\n  walletManager.setActions({\n    viewOpen: setViewOpen,\n    viewWalletRepo: setViewWalletRepo,\n    data: setData,\n    state: setState,\n    message: setMsg,\n  });\n\n  walletManager.walletRepos.forEach((wr) => {\n    wr.setActions({\n      viewOpen: setViewOpen,\n      viewWalletRepo: setViewWalletRepo,\n    });\n    wr.wallets.forEach((w) => {\n      w.setActions({\n        data: setData,\n        state: setState,\n        message: setMsg,\n      });\n    });\n  });\n\n  walletManager.mainWallets.forEach((w) => {\n    w.setActions({\n      data: setData,\n      state: setState,\n      message: setMsg,\n    });\n  });\n\n  useEffect(() => {\n    walletManager.onMounted();\n    return () => {\n      setViewOpen(false);\n      walletManager.onUnmounted();\n    };\n  }, []);\n\n  return (\n    <walletContext.Provider\n      value={{ walletManager, modalProvided: Boolean(ProvidedWalletModal) }}\n    >\n      {ProvidedWalletModal && (\n        <ProvidedWalletModal\n          isOpen={isViewOpen}\n          setOpen={setViewOpen}\n          walletRepo={viewWalletRepo}\n        />\n      )}\n      {children}\n    </walletContext.Provider>\n  );\n};\n"],"mappings":";AAAA;AAAA,EACE;AAAA,EAIA,SAAAA;AAAA,OACK;AACP,SAAgB,aAAAC,YAAW,WAAAC,UAAS,YAAAC,iBAAgB;;;ACNpD,OAAOC,YAAW;;;ACAlB;AAAA,EAGE;AAAA,EAMA;AAAA,EAEA;AAAA,OAGK;AACP;AAAA,EACE;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAoGH,SAII,KAJJ;AAlGG,IAAM,gBAAgB,cAGnB,IAAI;;;ADtBP,IAAM,aAAa,MAAsB;AAC9C,QAAM,UAAUC,OAAM,WAAW,aAAa;AAE9C,MAAI,CAAC,SAAS;AACZ,UAAM,IAAI,MAAM,uCAAuC;AAAA,EACzD;AAEA,QAAM;AAAA,IACJ,eAAe;AAAA,MACb;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF,IAAI;AAEJ,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;;;AD/BO,IAAM,iBAAiB,CAC5B,SACyB;AACzB,QAAM,CAAC,OAAO,QAAQ,IAAIC,UAAgBC,OAAM,OAAO;AACvD,QAAM,CAAC,IAAI,KAAK,IAAID,UAAsB;AAC1C,QAAM,CAAC,KAAK,MAAM,IAAIA,UAAiB;AAEvC,QAAM,EAAE,oBAAoB,eAAe,IAAI,WAAW;AAC1D,QAAM,WAAWE;AAAA,IACf,MAAM,+BAA+B,QAAQ,kBAAkB;AAAA,IAC/D,CAAC,IAAI;AAAA,EACP;AAEA,MAAI,CAAC,UAAU;AACb,UAAM,IAAI,MAAM,4BAA4B,QAAQ,mBAAmB;AAAA,EACzE;AAEA,EAAAC,WAAU,MAAM;AACd,mBAAe,EACZ,KAAK,CAACC,QAAO;AACZ,YAAMA,GAAE;AACR,eAASH,OAAM,IAAI;AAAA,IACrB,CAAC,EACA,MAAM,CAAC,MAAM;AACZ,aAAQ,EAAY,OAAO;AAC3B,eAASA,OAAM,KAAK;AAAA,IACtB,CAAC,EACA,QAAQ,MAAM;AACb,UAAI,UAAU,WAAW;AACvB,iBAASA,OAAM,IAAI;AAAA,MACrB;AAAA,IACF,CAAC;AAAA,EACL,GAAG,CAAC,IAAI,CAAC;AAET,SAAO;AAAA,IACL;AAAA,IACA,MAAM;AAAA,IACN,SAAS;AAAA,EACX;AACF;","names":["State","useEffect","useMemo","useState","React","React","useState","State","useMemo","useEffect","ns"]}