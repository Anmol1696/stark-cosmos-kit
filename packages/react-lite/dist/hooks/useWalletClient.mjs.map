{"version":3,"sources":["../../src/hooks/useWalletClient.ts","../../src/provider.tsx"],"sourcesContent":["import { State, WalletClientContext, WalletName } from '@cosmos-kit/core';\nimport React, { useMemo } from 'react';\n\nimport { walletContext } from '../provider';\n\nexport const useWalletClient = (\n  walletName?: WalletName\n): WalletClientContext => {\n  const context = React.useContext(walletContext);\n\n  if (!context) {\n    throw new Error('You have forgot to use ChainProvider.');\n  }\n\n  const { walletManager } = context;\n\n  const mainWallet = walletName\n    ? walletManager.getMainWallet(walletName)\n    : walletManager.mainWallets.find((w) => w.isActive);\n\n  if (!mainWallet) {\n    return {\n      client: void 0,\n      status: State.Init,\n      message: void 0,\n    };\n  }\n\n  const { clientMutable } = mainWallet;\n\n  return {\n    client: clientMutable.data,\n    status: clientMutable.state,\n    message: clientMutable.message,\n  };\n};\n","import { AssetList, Chain } from '@chain-registry/types';\nimport {\n  Data,\n  EndpointOptions,\n  Logger,\n  LogLevel,\n  MainWalletBase,\n  NameServiceName,\n  SessionOptions,\n  SignerOptions,\n  State,\n  WalletConnectOptions,\n  WalletManager,\n  WalletModalProps,\n  WalletRepo,\n} from '@cosmos-kit/core';\nimport React, {\n  createContext,\n  ReactNode,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\n\nexport const walletContext = createContext<{\n  walletManager: WalletManager;\n  modalProvided: boolean;\n} | null>(null);\n\nexport const ChainProvider = ({\n  chains,\n  assetLists,\n  wallets,\n  walletModal: ProvidedWalletModal,\n  throwErrors = false,\n  defaultNameService = 'icns',\n  walletConnectOptions,\n  signerOptions,\n  endpointOptions,\n  sessionOptions,\n  logLevel = 'WARN',\n  children,\n}: {\n  chains: Chain[];\n  assetLists: AssetList[];\n  wallets: MainWalletBase[];\n  walletModal?: (props: WalletModalProps) => JSX.Element;\n  throwErrors?: boolean;\n  defaultNameService?: NameServiceName;\n  walletConnectOptions?: WalletConnectOptions; // SignClientOptions is required if using wallet connect v2\n  signerOptions?: SignerOptions;\n  endpointOptions?: EndpointOptions;\n  sessionOptions?: SessionOptions;\n  logLevel?: LogLevel;\n  children: ReactNode;\n}) => {\n  const logger = useMemo(() => new Logger(logLevel), []);\n  const walletManager = useMemo(\n    () =>\n      new WalletManager(\n        chains,\n        assetLists,\n        wallets,\n        logger,\n        throwErrors,\n        defaultNameService,\n        walletConnectOptions,\n        signerOptions,\n        endpointOptions,\n        sessionOptions\n      ),\n    []\n  );\n\n  const [isViewOpen, setViewOpen] = useState<boolean>(false);\n  const [viewWalletRepo, setViewWalletRepo] = useState<\n    WalletRepo | undefined\n  >();\n\n  const [, setData] = useState<Data>();\n  const [, setState] = useState<State>(State.Init);\n  const [, setMsg] = useState<string | undefined>();\n\n  walletManager.setActions({\n    viewOpen: setViewOpen,\n    viewWalletRepo: setViewWalletRepo,\n    data: setData,\n    state: setState,\n    message: setMsg,\n  });\n\n  walletManager.walletRepos.forEach((wr) => {\n    wr.setActions({\n      viewOpen: setViewOpen,\n      viewWalletRepo: setViewWalletRepo,\n    });\n    wr.wallets.forEach((w) => {\n      w.setActions({\n        data: setData,\n        state: setState,\n        message: setMsg,\n      });\n    });\n  });\n\n  walletManager.mainWallets.forEach((w) => {\n    w.setActions({\n      data: setData,\n      state: setState,\n      message: setMsg,\n    });\n  });\n\n  useEffect(() => {\n    walletManager.onMounted();\n    return () => {\n      setViewOpen(false);\n      walletManager.onUnmounted();\n    };\n  }, []);\n\n  return (\n    <walletContext.Provider\n      value={{ walletManager, modalProvided: Boolean(ProvidedWalletModal) }}\n    >\n      {ProvidedWalletModal && (\n        <ProvidedWalletModal\n          isOpen={isViewOpen}\n          setOpen={setViewOpen}\n          walletRepo={viewWalletRepo}\n        />\n      )}\n      {children}\n    </walletContext.Provider>\n  );\n};\n"],"mappings":";AAAA,SAAS,SAAAA,cAA8C;AACvD,OAAOC,YAAwB;;;ACA/B;AAAA,EAGE;AAAA,EAMA;AAAA,EAEA;AAAA,OAGK;AACP;AAAA,EACE;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAoGH,SAII,KAJJ;AAlGG,IAAM,gBAAgB,cAGnB,IAAI;;;ADtBP,IAAM,kBAAkB,CAC7B,eACwB;AACxB,QAAM,UAAUC,OAAM,WAAW,aAAa;AAE9C,MAAI,CAAC,SAAS;AACZ,UAAM,IAAI,MAAM,uCAAuC;AAAA,EACzD;AAEA,QAAM,EAAE,cAAc,IAAI;AAE1B,QAAM,aAAa,aACf,cAAc,cAAc,UAAU,IACtC,cAAc,YAAY,KAAK,CAAC,MAAM,EAAE,QAAQ;AAEpD,MAAI,CAAC,YAAY;AACf,WAAO;AAAA,MACL,QAAQ;AAAA,MACR,QAAQC,OAAM;AAAA,MACd,SAAS;AAAA,IACX;AAAA,EACF;AAEA,QAAM,EAAE,cAAc,IAAI;AAE1B,SAAO;AAAA,IACL,QAAQ,cAAc;AAAA,IACtB,QAAQ,cAAc;AAAA,IACtB,SAAS,cAAc;AAAA,EACzB;AACF;","names":["State","React","React","State"]}