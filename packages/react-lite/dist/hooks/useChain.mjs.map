{"version":3,"sources":["../../src/hooks/useChain.ts","../../src/provider.tsx","../../src/utils.ts"],"sourcesContent":["import { ChainContext, ChainName } from '@cosmos-kit/core';\nimport React from 'react';\n\nimport { walletContext } from '../provider';\nimport { getChainWalletContext } from '../utils';\n\nexport const useChain = (\n  chainName: ChainName,\n  sync: boolean = true\n): ChainContext => {\n  const context = React.useContext(walletContext);\n\n  if (!context) {\n    throw new Error('You have forgot to use ChainProvider.');\n  }\n\n  const { walletManager, modalProvided } = context;\n\n  if (!modalProvided) {\n    throw new Error(\n      'You have to provide `walletModal` to use `useChain`, or use `useChainWallet` instead.'\n    );\n  }\n\n  const walletRepo = walletManager.getWalletRepo(chainName);\n  walletRepo.activate();\n  const {\n    connect,\n    disconnect,\n    openView,\n    closeView,\n    current,\n    chainRecord: { chain, assetList },\n    getRpcEndpoint,\n    getRestEndpoint,\n    getStargateClient,\n    getCosmWasmClient,\n    getNameService,\n  } = walletRepo;\n\n  const chainWalletContext = getChainWalletContext(\n    chain.chain_id,\n    current,\n    sync\n  );\n\n  return {\n    ...chainWalletContext,\n    walletRepo,\n    chain,\n    assets: assetList,\n    openView,\n    closeView,\n    connect: () => connect(void 0, sync),\n    disconnect: () => disconnect(void 0, sync),\n    getRpcEndpoint,\n    getRestEndpoint,\n    getStargateClient,\n    getCosmWasmClient,\n    getNameService,\n  };\n};\n","import { AssetList, Chain } from '@chain-registry/types';\nimport {\n  Data,\n  EndpointOptions,\n  Logger,\n  LogLevel,\n  MainWalletBase,\n  NameServiceName,\n  SessionOptions,\n  SignerOptions,\n  State,\n  WalletConnectOptions,\n  WalletManager,\n  WalletModalProps,\n  WalletRepo,\n} from '@cosmos-kit/core';\nimport React, {\n  createContext,\n  ReactNode,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\n\nexport const walletContext = createContext<{\n  walletManager: WalletManager;\n  modalProvided: boolean;\n} | null>(null);\n\nexport const ChainProvider = ({\n  chains,\n  assetLists,\n  wallets,\n  walletModal: ProvidedWalletModal,\n  throwErrors = false,\n  defaultNameService = 'icns',\n  walletConnectOptions,\n  signerOptions,\n  endpointOptions,\n  sessionOptions,\n  logLevel = 'WARN',\n  children,\n}: {\n  chains: Chain[];\n  assetLists: AssetList[];\n  wallets: MainWalletBase[];\n  walletModal?: (props: WalletModalProps) => JSX.Element;\n  throwErrors?: boolean;\n  defaultNameService?: NameServiceName;\n  walletConnectOptions?: WalletConnectOptions; // SignClientOptions is required if using wallet connect v2\n  signerOptions?: SignerOptions;\n  endpointOptions?: EndpointOptions;\n  sessionOptions?: SessionOptions;\n  logLevel?: LogLevel;\n  children: ReactNode;\n}) => {\n  const logger = useMemo(() => new Logger(logLevel), []);\n  const walletManager = useMemo(\n    () =>\n      new WalletManager(\n        chains,\n        assetLists,\n        wallets,\n        logger,\n        throwErrors,\n        defaultNameService,\n        walletConnectOptions,\n        signerOptions,\n        endpointOptions,\n        sessionOptions\n      ),\n    []\n  );\n\n  const [isViewOpen, setViewOpen] = useState<boolean>(false);\n  const [viewWalletRepo, setViewWalletRepo] = useState<\n    WalletRepo | undefined\n  >();\n\n  const [, setData] = useState<Data>();\n  const [, setState] = useState<State>(State.Init);\n  const [, setMsg] = useState<string | undefined>();\n\n  walletManager.setActions({\n    viewOpen: setViewOpen,\n    viewWalletRepo: setViewWalletRepo,\n    data: setData,\n    state: setState,\n    message: setMsg,\n  });\n\n  walletManager.walletRepos.forEach((wr) => {\n    wr.setActions({\n      viewOpen: setViewOpen,\n      viewWalletRepo: setViewWalletRepo,\n    });\n    wr.wallets.forEach((w) => {\n      w.setActions({\n        data: setData,\n        state: setState,\n        message: setMsg,\n      });\n    });\n  });\n\n  walletManager.mainWallets.forEach((w) => {\n    w.setActions({\n      data: setData,\n      state: setState,\n      message: setMsg,\n    });\n  });\n\n  useEffect(() => {\n    walletManager.onMounted();\n    return () => {\n      setViewOpen(false);\n      walletManager.onUnmounted();\n    };\n  }, []);\n\n  return (\n    <walletContext.Provider\n      value={{ walletManager, modalProvided: Boolean(ProvidedWalletModal) }}\n    >\n      {ProvidedWalletModal && (\n        <ProvidedWalletModal\n          isOpen={isViewOpen}\n          setOpen={setViewOpen}\n          walletRepo={viewWalletRepo}\n        />\n      )}\n      {children}\n    </walletContext.Provider>\n  );\n};\n","import {\n  ChainWalletBase,\n  ChainWalletContext,\n  WalletStatus,\n} from '@cosmos-kit/core';\n\nexport function getChainWalletContext(\n  chainId: string,\n  wallet?: ChainWalletBase,\n  sync = true\n): ChainWalletContext {\n  function walletAssert(\n    func: ((...params: any[]) => any | undefined) | undefined,\n    params: any[] = [],\n    name: string\n  ) {\n    if (!wallet) {\n      throw new Error(\n        `Wallet is undefined. Please choose a wallet to connect first.`\n      );\n    }\n\n    if (!func) {\n      throw new Error(\n        `Function ${name} not implemented by ${wallet?.walletInfo.prettyName} yet.`\n      );\n    }\n\n    return func(...params);\n  }\n\n  function clientMethodAssert(\n    func: ((...params: any[]) => any | undefined) | undefined,\n    params: any[] = [],\n    name: string\n  ) {\n    if (!wallet) {\n      throw new Error(\n        `Wallet is undefined. Please choose a wallet to connect first.`\n      );\n    }\n\n    if (!wallet?.client) {\n      throw new Error(`Wallet Client is undefined.`);\n    }\n\n    if (!func) {\n      throw new Error(\n        `Function ${name} not implemented by ${wallet?.walletInfo.prettyName} Client yet.`\n      );\n    }\n\n    return func(...params);\n  }\n\n  const status = wallet?.walletStatus || WalletStatus.Disconnected;\n\n  return {\n    chainWallet: wallet,\n\n    chain: wallet?.chainRecord.chain,\n    assets: wallet?.chainRecord.assetList,\n    logoUrl: wallet?.chainLogoUrl,\n    wallet: wallet?.walletInfo,\n    address: wallet?.address,\n    username: wallet?.username,\n    message: wallet ? wallet.message : 'No wallet is connected walletly.',\n    status,\n\n    isWalletDisconnected: status === 'Disconnected',\n    isWalletConnecting: status === 'Connecting',\n    isWalletConnected: status === 'Connected',\n    isWalletRejected: status === 'Rejected',\n    isWalletNotExist: status === 'NotExist',\n    isWalletError: status === 'Error',\n\n    connect: () => walletAssert(wallet?.connect, [void 0, sync], 'connect'),\n    disconnect: () =>\n      walletAssert(wallet?.disconnect, [void 0, sync], 'disconnect'),\n    getRpcEndpoint: (isLazy?: boolean) =>\n      walletAssert(wallet?.getRpcEndpoint, [isLazy], 'getRpcEndpoint'),\n    getRestEndpoint: (isLazy?: boolean) =>\n      walletAssert(wallet?.getRestEndpoint, [isLazy], 'getRestEndpoint'),\n    getStargateClient: () =>\n      walletAssert(wallet?.getStargateClient, [], 'getStargateClient'),\n    getCosmWasmClient: () =>\n      walletAssert(wallet?.getCosmWasmClient, [], 'getCosmWasmClient'),\n    getSigningStargateClient: () =>\n      walletAssert(\n        wallet?.getSigningStargateClient,\n        [],\n        'getSigningStargateClient'\n      ),\n    getSigningCosmWasmClient: () =>\n      walletAssert(\n        wallet?.getSigningCosmWasmClient,\n        [],\n        'getSigningCosmWasmClient'\n      ),\n    getNameService: () =>\n      walletAssert(wallet?.getNameService, [], 'getNameService'),\n\n    estimateFee: (...params: Parameters<ChainWalletContext['estimateFee']>) =>\n      walletAssert(wallet?.estimateFee, params, 'estimateFee'),\n    sign: (...params: Parameters<ChainWalletContext['sign']>) =>\n      walletAssert(wallet?.sign, params, 'sign'),\n    broadcast: (...params: Parameters<ChainWalletContext['broadcast']>) =>\n      walletAssert(wallet?.broadcast, params, 'broadcast'),\n    signAndBroadcast: (\n      ...params: Parameters<ChainWalletContext['signAndBroadcast']>\n    ) => walletAssert(wallet?.signAndBroadcast, params, 'signAndBroadcast'),\n\n    qrUrl: wallet?.client?.qrUrl,\n    appUrl: wallet?.client?.appUrl,\n\n    enable: () =>\n      clientMethodAssert(\n        wallet?.client?.enable.bind(wallet.client),\n        [chainId],\n        'enable'\n      ),\n    suggestToken: (...params: Parameters<ChainWalletContext['suggestToken']>) =>\n      clientMethodAssert(\n        wallet?.client?.suggestToken.bind(wallet.client),\n        [...params],\n        'suggestToken'\n      ),\n    getAccount: () =>\n      clientMethodAssert(\n        wallet?.client?.getAccount.bind(wallet.client),\n        [chainId],\n        'getAccount'\n      ),\n    getOfflineSigner: () =>\n      clientMethodAssert(\n        wallet?.client?.getOfflineSigner.bind(wallet.client),\n        [chainId, wallet?.preferredSignType],\n        'getOfflineSigner'\n      ),\n    getOfflineSignerAmino: () =>\n      clientMethodAssert(\n        wallet?.client?.getOfflineSignerAmino.bind(wallet.client),\n        [chainId],\n        'getOfflineSignerAmino'\n      ),\n    getOfflineSignerDirect: () =>\n      clientMethodAssert(\n        wallet?.client?.getOfflineSignerDirect.bind(wallet.client),\n        [chainId],\n        'getOfflineSignerDirect'\n      ),\n    signAmino: (...params: Parameters<ChainWalletContext['signAmino']>) =>\n      clientMethodAssert(\n        wallet?.client?.signAmino.bind(wallet.client),\n        [chainId, ...params],\n        'signAmino'\n      ),\n    signDirect: (...params: Parameters<ChainWalletContext['signDirect']>) =>\n      clientMethodAssert(\n        wallet?.client?.signDirect.bind(wallet.client),\n        [chainId, ...params],\n        'signDirect'\n      ),\n    signArbitrary: (...params: Parameters<ChainWalletContext['signArbitrary']>) =>\n      clientMethodAssert(\n        wallet?.client?.signArbitrary.bind(wallet.client),\n        [chainId, ...params],\n        'signArbitrary'\n      ),\n    sendTx: (...params: Parameters<ChainWalletContext['sendTx']>) =>\n      clientMethodAssert(\n        wallet?.client?.sendTx.bind(wallet.client),\n        [chainId, ...params],\n        'sendTx'\n      ),\n  };\n}\n"],"mappings":"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","names":["React","React"]}