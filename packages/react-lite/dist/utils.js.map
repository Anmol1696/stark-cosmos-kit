{"version":3,"sources":["../src/utils.ts"],"sourcesContent":["import {\n  ChainWalletBase,\n  ChainWalletContext,\n  WalletStatus,\n} from '@cosmos-kit/core';\n\nexport function getChainWalletContext(\n  chainId: string,\n  wallet?: ChainWalletBase,\n  sync = true\n): ChainWalletContext {\n  function walletAssert(\n    func: ((...params: any[]) => any | undefined) | undefined,\n    params: any[] = [],\n    name: string\n  ) {\n    if (!wallet) {\n      throw new Error(\n        `Wallet is undefined. Please choose a wallet to connect first.`\n      );\n    }\n\n    if (!func) {\n      throw new Error(\n        `Function ${name} not implemented by ${wallet?.walletInfo.prettyName} yet.`\n      );\n    }\n\n    return func(...params);\n  }\n\n  function clientMethodAssert(\n    func: ((...params: any[]) => any | undefined) | undefined,\n    params: any[] = [],\n    name: string\n  ) {\n    if (!wallet) {\n      throw new Error(\n        `Wallet is undefined. Please choose a wallet to connect first.`\n      );\n    }\n\n    if (!wallet?.client) {\n      throw new Error(`Wallet Client is undefined.`);\n    }\n\n    if (!func) {\n      throw new Error(\n        `Function ${name} not implemented by ${wallet?.walletInfo.prettyName} Client yet.`\n      );\n    }\n\n    return func(...params);\n  }\n\n  const status = wallet?.walletStatus || WalletStatus.Disconnected;\n\n  return {\n    chainWallet: wallet,\n\n    chain: wallet?.chainRecord.chain,\n    assets: wallet?.chainRecord.assetList,\n    logoUrl: wallet?.chainLogoUrl,\n    wallet: wallet?.walletInfo,\n    address: wallet?.address,\n    username: wallet?.username,\n    message: wallet ? wallet.message : 'No wallet is connected walletly.',\n    status,\n\n    isWalletDisconnected: status === 'Disconnected',\n    isWalletConnecting: status === 'Connecting',\n    isWalletConnected: status === 'Connected',\n    isWalletRejected: status === 'Rejected',\n    isWalletNotExist: status === 'NotExist',\n    isWalletError: status === 'Error',\n\n    connect: () => walletAssert(wallet?.connect, [void 0, sync], 'connect'),\n    disconnect: () =>\n      walletAssert(wallet?.disconnect, [void 0, sync], 'disconnect'),\n    getRpcEndpoint: (isLazy?: boolean) =>\n      walletAssert(wallet?.getRpcEndpoint, [isLazy], 'getRpcEndpoint'),\n    getRestEndpoint: (isLazy?: boolean) =>\n      walletAssert(wallet?.getRestEndpoint, [isLazy], 'getRestEndpoint'),\n    getStargateClient: () =>\n      walletAssert(wallet?.getStargateClient, [], 'getStargateClient'),\n    getCosmWasmClient: () =>\n      walletAssert(wallet?.getCosmWasmClient, [], 'getCosmWasmClient'),\n    getSigningStargateClient: () =>\n      walletAssert(\n        wallet?.getSigningStargateClient,\n        [],\n        'getSigningStargateClient'\n      ),\n    getSigningCosmWasmClient: () =>\n      walletAssert(\n        wallet?.getSigningCosmWasmClient,\n        [],\n        'getSigningCosmWasmClient'\n      ),\n    getNameService: () =>\n      walletAssert(wallet?.getNameService, [], 'getNameService'),\n\n    estimateFee: (...params: Parameters<ChainWalletContext['estimateFee']>) =>\n      walletAssert(wallet?.estimateFee, params, 'estimateFee'),\n    sign: (...params: Parameters<ChainWalletContext['sign']>) =>\n      walletAssert(wallet?.sign, params, 'sign'),\n    broadcast: (...params: Parameters<ChainWalletContext['broadcast']>) =>\n      walletAssert(wallet?.broadcast, params, 'broadcast'),\n    signAndBroadcast: (\n      ...params: Parameters<ChainWalletContext['signAndBroadcast']>\n    ) => walletAssert(wallet?.signAndBroadcast, params, 'signAndBroadcast'),\n\n    qrUrl: wallet?.client?.qrUrl,\n    appUrl: wallet?.client?.appUrl,\n\n    enable: () =>\n      clientMethodAssert(\n        wallet?.client?.enable.bind(wallet.client),\n        [chainId],\n        'enable'\n      ),\n    suggestToken: (...params: Parameters<ChainWalletContext['suggestToken']>) =>\n      clientMethodAssert(\n        wallet?.client?.suggestToken.bind(wallet.client),\n        [...params],\n        'suggestToken'\n      ),\n    getAccount: () =>\n      clientMethodAssert(\n        wallet?.client?.getAccount.bind(wallet.client),\n        [chainId],\n        'getAccount'\n      ),\n    getOfflineSigner: () =>\n      clientMethodAssert(\n        wallet?.client?.getOfflineSigner.bind(wallet.client),\n        [chainId, wallet?.preferredSignType],\n        'getOfflineSigner'\n      ),\n    getOfflineSignerAmino: () =>\n      clientMethodAssert(\n        wallet?.client?.getOfflineSignerAmino.bind(wallet.client),\n        [chainId],\n        'getOfflineSignerAmino'\n      ),\n    getOfflineSignerDirect: () =>\n      clientMethodAssert(\n        wallet?.client?.getOfflineSignerDirect.bind(wallet.client),\n        [chainId],\n        'getOfflineSignerDirect'\n      ),\n    signAmino: (...params: Parameters<ChainWalletContext['signAmino']>) =>\n      clientMethodAssert(\n        wallet?.client?.signAmino.bind(wallet.client),\n        [chainId, ...params],\n        'signAmino'\n      ),\n    signDirect: (...params: Parameters<ChainWalletContext['signDirect']>) =>\n      clientMethodAssert(\n        wallet?.client?.signDirect.bind(wallet.client),\n        [chainId, ...params],\n        'signDirect'\n      ),\n    signArbitrary: (...params: Parameters<ChainWalletContext['signArbitrary']>) =>\n      clientMethodAssert(\n        wallet?.client?.signArbitrary.bind(wallet.client),\n        [chainId, ...params],\n        'signArbitrary'\n      ),\n    sendTx: (...params: Parameters<ChainWalletContext['sendTx']>) =>\n      clientMethodAssert(\n        wallet?.client?.sendTx.bind(wallet.client),\n        [chainId, ...params],\n        'sendTx'\n      ),\n  };\n}\n"],"mappings":"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","names":[]}