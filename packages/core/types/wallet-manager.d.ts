import { Chain } from '@chain-registry/types';
import { SigningCosmWasmClient } from '@cosmjs/cosmwasm-stargate';
import { OfflineSigner } from '@cosmjs/proto-signing';
import { SigningStargateClient } from '@cosmjs/stargate';
import { StateBase } from './bases';
import { Actions, ChainInfo, ChainName, EndpointOptions, ManagerActions, SignerOptions, State, StorageOptions, ViewOptions, WalletAdapter, WalletData, WalletName, WalletOption } from './types';
export declare class WalletManager extends StateBase<WalletData> {
    protected _currentWalletName?: WalletName;
    protected _currentChainName?: ChainName;
    protected _useView: boolean;
    protected _concurrency?: number;
    actions?: ManagerActions<WalletData>;
    wallets: WalletOption[];
    chains: ChainInfo[];
    viewOptions: ViewOptions;
    storageOptions: StorageOptions;
    constructor(chains: Chain[], wallets: WalletOption[], signerOptions?: SignerOptions, viewOptions?: ViewOptions, endpointOptions?: EndpointOptions, storageOptions?: StorageOptions);
    get useView(): boolean;
    get useStorage(): boolean;
    get currentWalletName(): string;
    get currentChainName(): string;
    get currentWallet(): WalletAdapter | undefined;
    get data(): WalletData | undefined;
    get state(): State;
    get message(): string;
    get username(): string | undefined;
    get address(): string | undefined;
    get offlineSigner(): OfflineSigner | undefined;
    get walletNames(): string[];
    get walletCount(): number;
    get chainNames(): string[];
    get chainCount(): number;
    get concurrency(): number;
    emit(type: string): import("./types").Dispatch<any>;
    get emitWalletName(): import("./types").Dispatch<string>;
    get emitChainName(): import("./types").Dispatch<string>;
    get emitViewOpen(): import("./types").Dispatch<boolean>;
    getStargateClient: () => Promise<SigningStargateClient | undefined>;
    getCosmWasmClient: () => Promise<SigningCosmWasmClient | undefined>;
    setActions(actions: Actions): void;
    setViewOptions(viewOptions: ViewOptions): void;
    reset(): void;
    private storeCurrent;
    setCurrentWallet: (walletName?: WalletName) => void;
    setCurrentChain: (chainName?: ChainName) => void;
    private getWallet;
    update: () => void;
    connect: () => Promise<void>;
    disconnect: () => Promise<void>;
    openView: () => void;
    closeView: () => void;
}
