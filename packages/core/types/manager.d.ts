import { AssetList, Chain } from '@chain-registry/types';
import { CosmWasmClient, SigningCosmWasmClient } from '@cosmjs/cosmwasm-stargate';
import { EncodeObject, OfflineSigner } from '@cosmjs/proto-signing';
import { SigningStargateClient, StargateClient, StdFee } from '@cosmjs/stargate';
import { TxRaw } from 'cosmjs-types/cosmos/tx/v1beta1/tx';
import { MainWalletBase, StateBase } from './bases';
import { Actions, AppEnv, ChainName, ChainRecord, EndpointOptions, ManagerActions, SessionOptions, SignerOptions, State, StorageOptions, ViewOptions, Wallet, WalletAdapter, WalletData, WalletName } from './types';
export declare class WalletManager extends StateBase<WalletData> {
    private _currentWalletName?;
    private _currentChainName?;
    actions?: ManagerActions<WalletData>;
    private _wallets;
    chainRecords: ChainRecord[];
    env?: AppEnv;
    viewOptions: ViewOptions;
    storageOptions: StorageOptions;
    sessionOptions: SessionOptions;
    constructor(chains: Chain[], assetLists: AssetList[], wallets: MainWalletBase[], signerOptions?: SignerOptions, viewOptions?: ViewOptions, endpointOptions?: EndpointOptions, storageOptions?: StorageOptions, sessionOptions?: SessionOptions);
    get wallets(): MainWalletBase[];
    get useStorage(): boolean;
    get currentWalletName(): string;
    get currentChainName(): string;
    get currentWallet(): WalletAdapter | undefined;
    get currentWalletInfo(): Wallet | undefined;
    get currentChainRecord(): ChainRecord | undefined;
    get data(): WalletData | undefined;
    get state(): State;
    get message(): string;
    get username(): string | undefined;
    get address(): string | undefined;
    get offlineSigner(): OfflineSigner | undefined;
    get walletNames(): string[];
    get walletCount(): number;
    get chainNames(): string[];
    get chainCount(): number;
    private get emitWalletName();
    private get emitChainName();
    private get emitViewOpen();
    enable: (chainIds: string | string[]) => Promise<void>;
    getStargateClient: () => Promise<StargateClient | undefined>;
    getCosmWasmClient: () => Promise<CosmWasmClient | undefined>;
    getSigningStargateClient: () => Promise<SigningStargateClient | undefined>;
    getSigningCosmWasmClient: () => Promise<SigningCosmWasmClient | undefined>;
    sign: (messages: EncodeObject[], fee: StdFee, memo?: string, type?: string) => Promise<TxRaw>;
    broadcast: (signedMessages: TxRaw, type?: string) => Promise<import("@cosmjs/cosmwasm-stargate").DeliverTxResponse>;
    signAndBroadcast: (messages: EncodeObject[], fee?: StdFee, memo?: string, type?: string) => Promise<import("@cosmjs/cosmwasm-stargate").DeliverTxResponse>;
    setActions: (actions: Actions) => void;
    reset: () => void;
    private updateLocalStorage;
    setCurrentWallet: (walletName?: WalletName) => void;
    setCurrentChain: (chainName?: ChainName) => void;
    getWallet: (walletName: WalletName, chainName?: ChainName) => WalletAdapter;
    getChainRecord: (chainName?: ChainName) => ChainRecord | undefined;
    getChainLogo: (chainName?: ChainName) => string | undefined;
    private get callbacks();
    connect: () => Promise<void>;
    disconnect: () => Promise<void>;
    openView: () => void;
    closeView: () => void;
    private _handleTabLoad;
    private _handleTabClose;
    private _connectEventLisener;
    onMounted: () => void;
    onUnmounted: () => void;
}
