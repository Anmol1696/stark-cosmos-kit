{"version":3,"sources":["../../src/utils/logger.ts"],"sourcesContent":["import { LogLevel } from '../types';\n\nfunction wrap(logLevel: LogLevel, message?: any) {\n  switch (logLevel) {\n    case 'ERROR':\n      return [`%c${logLevel} -`, 'color: Red;', message];\n    case 'WARN':\n      return [`%c${logLevel} -`, 'color: Orange;', message];\n    case 'INFO':\n      return [`%c${logLevel} -`, 'color: Blue;', message];\n    case 'DEBUG':\n      return [`%c${logLevel} -`, 'color: Purple;', message];\n    case 'TRACE':\n      return [`%c${logLevel} -`, 'color: Brown;', message];\n  }\n}\n\nexport class Logger {\n  private readonly logger: Console;\n  public readonly level: LogLevel;\n  public readonly levelOrder: LogLevel[] = [\n    'TRACE',\n    'DEBUG',\n    'INFO',\n    'WARN',\n    'ERROR',\n  ];\n\n  public constructor(level: LogLevel = 'INFO') {\n    this.logger = console;\n    this.level = level;\n  }\n\n  private compare(a: LogLevel, b: LogLevel) {\n    const aindex = this.levelOrder.indexOf(a);\n    const bindex = this.levelOrder.indexOf(b);\n    if (aindex > bindex) {\n      return 1;\n    } else if (aindex < bindex) {\n      return -1;\n    } else {\n      return 0;\n    }\n  }\n\n  public trace(message?: any, ...optionalParams: any[]): void {\n    if (this.compare('TRACE', this.level) >= 0) {\n      this.logger.trace(...wrap('TRACE', message), ...optionalParams);\n    }\n  }\n\n  public debug(message?: any, ...optionalParams: any[]): void {\n    if (this.compare('DEBUG', this.level) >= 0) {\n      this.logger.debug(...wrap('DEBUG', message), ...optionalParams);\n    }\n  }\n\n  public info(message?: any, ...optionalParams: any[]): void {\n    if (this.compare('INFO', this.level) >= 0) {\n      this.logger.info(...wrap('INFO', message), ...optionalParams);\n    }\n  }\n\n  public warn(message?: any, ...optionalParams: any[]): void {\n    if (this.compare('WARN', this.level) >= 0) {\n      this.logger.warn(...wrap('WARN', message), ...optionalParams);\n    }\n  }\n\n  public error(message?: any, ...optionalParams: any[]): void {\n    if (this.compare('ERROR', this.level) >= 0) {\n      this.logger.error(...wrap('ERROR', message), ...optionalParams);\n    }\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,SAAS,KAAK,UAAoB,SAAe;AAC/C,UAAQ,UAAU;AAAA,IAChB,KAAK;AACH,aAAO,CAAC,KAAK,cAAc,eAAe,OAAO;AAAA,IACnD,KAAK;AACH,aAAO,CAAC,KAAK,cAAc,kBAAkB,OAAO;AAAA,IACtD,KAAK;AACH,aAAO,CAAC,KAAK,cAAc,gBAAgB,OAAO;AAAA,IACpD,KAAK;AACH,aAAO,CAAC,KAAK,cAAc,kBAAkB,OAAO;AAAA,IACtD,KAAK;AACH,aAAO,CAAC,KAAK,cAAc,iBAAiB,OAAO;AAAA,EACvD;AACF;AAEO,IAAM,SAAN,MAAa;AAAA,EAWX,YAAY,QAAkB,QAAQ;AAR7C,SAAgB,aAAyB;AAAA,MACvC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAGE,SAAK,SAAS;AACd,SAAK,QAAQ;AAAA,EACf;AAAA,EAEQ,QAAQ,GAAa,GAAa;AACxC,UAAM,SAAS,KAAK,WAAW,QAAQ,CAAC;AACxC,UAAM,SAAS,KAAK,WAAW,QAAQ,CAAC;AACxC,QAAI,SAAS,QAAQ;AACnB,aAAO;AAAA,IACT,WAAW,SAAS,QAAQ;AAC1B,aAAO;AAAA,IACT,OAAO;AACL,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EAEO,MAAM,YAAkB,gBAA6B;AAC1D,QAAI,KAAK,QAAQ,SAAS,KAAK,KAAK,KAAK,GAAG;AAC1C,WAAK,OAAO,MAAM,GAAG,KAAK,SAAS,OAAO,GAAG,GAAG,cAAc;AAAA,IAChE;AAAA,EACF;AAAA,EAEO,MAAM,YAAkB,gBAA6B;AAC1D,QAAI,KAAK,QAAQ,SAAS,KAAK,KAAK,KAAK,GAAG;AAC1C,WAAK,OAAO,MAAM,GAAG,KAAK,SAAS,OAAO,GAAG,GAAG,cAAc;AAAA,IAChE;AAAA,EACF;AAAA,EAEO,KAAK,YAAkB,gBAA6B;AACzD,QAAI,KAAK,QAAQ,QAAQ,KAAK,KAAK,KAAK,GAAG;AACzC,WAAK,OAAO,KAAK,GAAG,KAAK,QAAQ,OAAO,GAAG,GAAG,cAAc;AAAA,IAC9D;AAAA,EACF;AAAA,EAEO,KAAK,YAAkB,gBAA6B;AACzD,QAAI,KAAK,QAAQ,QAAQ,KAAK,KAAK,KAAK,GAAG;AACzC,WAAK,OAAO,KAAK,GAAG,KAAK,QAAQ,OAAO,GAAG,GAAG,cAAc;AAAA,IAC9D;AAAA,EACF;AAAA,EAEO,MAAM,YAAkB,gBAA6B;AAC1D,QAAI,KAAK,QAAQ,SAAS,KAAK,KAAK,KAAK,GAAG;AAC1C,WAAK,OAAO,MAAM,GAAG,KAAK,SAAS,OAAO,GAAG,GAAG,cAAc;AAAA,IAChE;AAAA,EACF;AACF;","names":[]}