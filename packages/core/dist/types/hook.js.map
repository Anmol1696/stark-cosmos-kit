{"version":3,"sources":["../../src/types/hook.ts"],"sourcesContent":["import { AssetList, Chain } from '@chain-registry/types';\nimport {\n  AminoSignResponse,\n  OfflineAminoSigner,\n  StdSignature,\n  StdSignDoc,\n} from '@cosmjs/amino';\nimport {\n  CosmWasmClient,\n  SigningCosmWasmClient,\n} from '@cosmjs/cosmwasm-stargate';\nimport {\n  DirectSignResponse,\n  EncodeObject,\n  OfflineDirectSigner,\n  OfflineSigner,\n} from '@cosmjs/proto-signing';\nimport {\n  DeliverTxResponse,\n  SigningStargateClient,\n  StargateClient,\n  StdFee,\n} from '@cosmjs/stargate';\nimport { TxRaw } from 'cosmjs-types/cosmos/tx/v1beta1/tx';\n\nimport { ChainWalletBase, MainWalletBase } from '../bases';\nimport { NameService } from '../name-service';\nimport { WalletRepo } from '../repository';\nimport { ChainName, ChainRecord } from './chain';\nimport {\n  CosmosClientType,\n  ModalTheme,\n  Mutable,\n  SignType,\n  State,\n} from './common';\nimport {\n  EndpointOptions,\n  EventName,\n  ExtendedHttpEndpoint,\n  SignerOptions,\n} from './manager';\nimport {\n  AppUrl,\n  BroadcastMode,\n  DirectSignDoc,\n  NameServiceName,\n  SignOptions,\n  SuggestToken,\n  Wallet,\n  WalletAccount,\n  WalletClient,\n  WalletStatus,\n} from './wallet';\n\nexport interface ChainWalletContext {\n  chainWallet: ChainWalletBase | undefined;\n\n  chain: Chain;\n  assets: AssetList | undefined;\n  wallet: Wallet;\n  logoUrl: string | undefined;\n  address: string | undefined;\n  username: string | undefined;\n  message: string | undefined;\n  status: WalletStatus;\n\n  isWalletDisconnected: boolean;\n  isWalletConnecting: boolean;\n  isWalletConnected: boolean;\n  isWalletRejected: boolean;\n  isWalletNotExist: boolean;\n  isWalletError: boolean;\n\n  connect: () => Promise<void>;\n  disconnect: () => Promise<void>;\n  getRpcEndpoint: (isLazy?: boolean) => Promise<string | ExtendedHttpEndpoint>;\n  getRestEndpoint: (isLazy?: boolean) => Promise<string | ExtendedHttpEndpoint>;\n  getStargateClient: () => Promise<StargateClient>;\n  getCosmWasmClient: () => Promise<CosmWasmClient>;\n  getSigningStargateClient: () => Promise<SigningStargateClient>;\n  getSigningCosmWasmClient: () => Promise<SigningCosmWasmClient>;\n  getNameService: () => Promise<NameService>;\n\n  estimateFee: (\n    messages: EncodeObject[],\n    type?: CosmosClientType,\n    memo?: string,\n    multiplier?: number\n  ) => Promise<StdFee>;\n  sign: (\n    messages: EncodeObject[],\n    fee?: StdFee,\n    memo?: string,\n    type?: CosmosClientType\n  ) => Promise<TxRaw>;\n  broadcast: (\n    signedMessages: TxRaw,\n    type?: CosmosClientType\n  ) => Promise<DeliverTxResponse>;\n  signAndBroadcast: (\n    messages: EncodeObject[],\n    fee?: StdFee,\n    memo?: string,\n    type?: CosmosClientType\n  ) => Promise<DeliverTxResponse>;\n\n  // from wallet client\n  qrUrl: Mutable<string> | undefined;\n  appUrl: Mutable<AppUrl> | undefined;\n\n  enable: () => Promise<void>;\n  suggestToken: (data: SuggestToken) => Promise<void>;\n  getAccount: () => Promise<WalletAccount>;\n  getOfflineSigner: () => OfflineSigner;\n  getOfflineSignerAmino: () => OfflineAminoSigner;\n  getOfflineSignerDirect: () => OfflineDirectSigner;\n  signAmino: (\n    signer: string,\n    signDoc: StdSignDoc,\n    signOptions?: SignOptions\n  ) => Promise<AminoSignResponse>;\n  signDirect: (\n    signer: string,\n    signDoc: DirectSignDoc,\n    signOptions?: SignOptions\n  ) => Promise<DirectSignResponse>;\n  signArbitrary: (\n    signer: string,\n    data: string | Uint8Array\n  ) => Promise<StdSignature>;\n  sendTx(tx: Uint8Array, mode: BroadcastMode): Promise<Uint8Array>;\n}\n\nexport interface ChainContext extends ChainWalletContext {\n  wallet: Wallet | undefined;\n  walletRepo: WalletRepo;\n  openView: () => void;\n  closeView: () => void;\n}\n\nexport interface ManagerContext {\n  chainRecords: ChainRecord[];\n  walletRepos: WalletRepo[];\n  mainWallets: MainWalletBase[];\n  defaultNameService: NameServiceName;\n  getChainRecord: (chainName: ChainName) => ChainRecord;\n  getWalletRepo: (chainName: ChainName) => WalletRepo;\n  addChains: (\n    chains: Chain[],\n    assetLists: AssetList[],\n    signerOptions?: SignerOptions,\n    endpointOptions?: EndpointOptions\n  ) => void;\n  getChainLogo: (chainName: ChainName) => string | undefined;\n  getNameService: (chainName?: ChainName) => Promise<NameService>;\n  on: (event: EventName, handler: (params: any) => void) => void;\n  off: (event: EventName, handler: (params: any) => void) => void;\n}\n\nexport interface ModalThemeContext {\n  modalTheme: ModalTheme;\n  setModalTheme: (theme: ModalTheme) => void;\n}\n\nexport interface WalletContext {\n  mainWallet: MainWalletBase | undefined;\n  chainWallets: ChainWalletBase[];\n  wallet: Wallet | undefined;\n  status: WalletStatus;\n  message: string | undefined;\n}\n\nexport interface WalletClientContext {\n  client: WalletClient | undefined;\n  status: State;\n  message: string | undefined;\n}\n"],"mappings":";;;;;;;;;;;;;;;AAAA;AAAA;","names":[]}