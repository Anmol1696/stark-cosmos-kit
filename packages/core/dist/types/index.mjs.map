{"version":3,"sources":["../../src/types/common.ts","../../src/types/wallet.ts","../../src/types/view.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nexport enum State {\n  Init = 'Init',\n  Pending = 'Pending',\n  Done = 'Done',\n  Error = 'Error',\n}\n\nexport interface Mutable<T> {\n  state: State;\n  data?: T;\n  message?: string;\n}\n\nexport type Dispatch<T> = (value: T) => void;\n\nexport interface Actions {\n  [k: string]: Dispatch<any> | undefined;\n}\n\nexport type Data = Record<string, any>;\n\nexport interface StateActions<T> extends Actions {\n  state?: Dispatch<State>;\n  data?: Dispatch<T | undefined>;\n  message?: Dispatch<string | undefined>;\n}\n\nexport interface WalletClientActions {\n  qrUrl?: StateActions<string>;\n  appUrl?: StateActions<string>;\n}\n\nexport interface Callbacks {\n  beforeConnect?: () => void;\n  beforeDisconnect?: () => void;\n  afterConnect?: () => void;\n  afterDisconnect?: () => void;\n}\n\nexport type OS = 'android' | 'ios' | 'windows' | 'macos';\nexport type BrowserName = 'chrome' | 'firefox' | 'safari' | string;\nexport type DeviceType = 'desktop' | 'mobile';\n\nexport interface DappEnv {\n  device?: DeviceType;\n  os?: OS;\n  browser?: BrowserName;\n}\n\nexport type CosmosClientType = 'stargate' | 'cosmwasm';\nexport type SignType = 'amino' | 'direct';\n\nexport type LogLevel = 'TRACE' | 'DEBUG' | 'INFO' | 'WARN' | 'ERROR';\n\nexport type ModalTheme = 'light' | 'dark';\n","import {\n  AccountData,\n  AminoSignResponse,\n  OfflineAminoSigner,\n  StdSignature,\n  StdSignDoc,\n} from '@cosmjs/amino';\nimport {\n  DirectSignResponse,\n  OfflineDirectSigner,\n  OfflineSigner,\n} from '@cosmjs/proto-signing';\nimport { SignClientTypes } from '@walletconnect/types';\n\nimport { ChainWalletBase, MainWalletBase } from '../bases';\nimport { ChainName, ChainRecord } from './chain';\nimport { DappEnv, Mutable, OS, SignType } from './common';\n\nexport interface Key {\n  readonly name: string;\n  readonly algo: string;\n  readonly pubKey: Uint8Array;\n  readonly address: Uint8Array;\n  readonly bech32Address: string;\n  readonly isNanoLedger: boolean;\n  readonly isSmartContract?: boolean;\n}\n\nexport interface SimpleAccount {\n  namespace: string;\n  chainId: string;\n  address: string;\n  username?: string;\n}\n\nexport type WalletName = string;\n\nexport enum WalletStatus {\n  Disconnected = 'Disconnected',\n  Connecting = 'Connecting',\n  Connected = 'Connected',\n  NotExist = 'NotExist',\n  Rejected = 'Rejected',\n  Error = 'Error',\n}\n\nexport interface DownloadInfo extends DappEnv {\n  icon?: string | ((props: any) => JSX.Element); // i.e. { IconType } from 'react-icons';\n  link: string;\n}\n\nexport type WalletMode = 'extension' | 'wallet-connect';\n\nexport interface Metadata {\n  name: string;\n  description: string;\n  url: string;\n  icons: string[];\n}\n\nexport interface AppUrl {\n  native?:\n    | string\n    | {\n        android?: string;\n        ios?: string;\n        macos?: string;\n        windows?: string;\n      };\n  universal?: string;\n}\n\nexport interface Wallet {\n  name: WalletName;\n  prettyName: string;\n  mode: WalletMode;\n  mobileDisabled: boolean;\n  rejectMessage?:\n    | {\n        source: string; // message from wallet app\n        target?: string; // message stored in walletManager, default 'Request Rejected!'\n      }\n    | string; // message from wallet app\n  rejectCode?: number; // code from wallet app\n  connectEventNamesOnWindow?: string[];\n  connectEventNamesOnClient?: string[];\n  downloads?: DownloadInfo[];\n  logo?: string;\n  walletconnect?: {\n    name: string;\n    projectId: string;\n    encoding?: BufferEncoding; // encoding for bytes, default 'hex'\n    mobile?: AppUrl; // redirect link on mobile\n    formatNativeUrl?: (\n      appUrl: string,\n      wcUri: string,\n      os: OS | undefined,\n      name: string\n    ) => string;\n    formatUniversalUrl?: (\n      appUrl: string,\n      wcUri: string,\n      name: string\n    ) => string;\n  };\n}\n\nexport type Bech32Address = string;\n\nexport interface WalletAccount extends AccountData {\n  username?: string;\n  isNanoLedger?: boolean;\n  isSmartContract?: boolean;\n}\n\nexport interface SignOptions {\n  readonly preferNoSetFee?: boolean;\n  readonly preferNoSetMemo?: boolean;\n  readonly disableBalanceCheck?: boolean;\n}\n\nexport interface DirectSignDoc {\n  /** SignDoc bodyBytes */\n  bodyBytes?: Uint8Array | null;\n  /** SignDoc authInfoBytes */\n  authInfoBytes?: Uint8Array | null;\n  /** SignDoc chainId */\n  chainId?: string | null;\n  /** SignDoc accountNumber */\n  accountNumber?: Long | null;\n}\n\nexport declare enum BroadcastMode {\n  /** Return after tx commit */\n  Block = 'block',\n  /** Return after CheckTx */\n  Sync = 'sync',\n  /** Return right away */\n  Async = 'async',\n}\n\nexport interface SuggestCW20Token {\n  contractAddress: string;\n  viewingKey?: string;\n  imageURL?: string;\n  coinGeckoId?: string;\n}\n\nexport const SuggestTokenTypes = {\n  CW20: 'cw20',\n  ERC20: 'erc20',\n} as const;\n\nexport type SuggestTokenType = typeof SuggestTokenTypes[keyof typeof SuggestTokenTypes];\n\nexport interface SuggestToken {\n  chainId: string;\n  chainName: string;\n  type: SuggestTokenType;\n  tokens: SuggestCW20Token[];\n}\n\nexport interface WalletClient {\n  getSimpleAccount: (chainId: string) => Promise<SimpleAccount>;\n\n  qrUrl?: Mutable<string>;\n  appUrl?: Mutable<AppUrl>;\n\n  connect?: (chainIds: string | string[]) => Promise<void>; // called when chain wallet connect is called\n  disconnect?: () => Promise<void>; // called when wallet disconnect is called\n  on?: (type: string, listener: EventListenerOrEventListenerObject) => void;\n  off?: (type: string, listener: EventListenerOrEventListenerObject) => void;\n  enable?: (chainIds: string | string[]) => Promise<void>;\n  suggestToken?: (data: SuggestToken) => Promise<void>;\n  addChain?: (chainInfo: ChainRecord) => Promise<void>;\n  getAccount?: (chainId: string) => Promise<WalletAccount>;\n  getOfflineSigner?: (\n    chainId: string,\n    preferredSignType?: SignType // by default `amino`\n  ) => Promise<OfflineSigner> | OfflineSigner;\n  getOfflineSignerAmino?: (chainId: string) => OfflineAminoSigner;\n  getOfflineSignerDirect?: (chainId: string) => OfflineDirectSigner;\n  signAmino?: (\n    chainId: string,\n    signer: string,\n    signDoc: StdSignDoc,\n    signOptions?: SignOptions\n  ) => Promise<AminoSignResponse>;\n  signDirect?: (\n    chainId: string,\n    signer: string,\n    signDoc: DirectSignDoc,\n    signOptions?: SignOptions\n  ) => Promise<DirectSignResponse>;\n  signArbitrary?: (\n    chainId: string,\n    signer: string,\n    data: string | Uint8Array\n  ) => Promise<StdSignature>;\n  getEnigmaPubKey?: (chainId: string) => Promise<Uint8Array>;\n  getEnigmaTxEncryptionKey?: (\n    chainId: string,\n    nonce: Uint8Array\n  ) => Promise<Uint8Array>;\n  enigmaEncrypt?: (\n    chainId: string,\n    contractCodeHash: string,\n    msg: object\n  ) => Promise<Uint8Array>;\n  enigmaDecrypt?: (\n    chainId: string,\n    ciphertext: Uint8Array,\n    nonce: Uint8Array\n  ) => Promise<Uint8Array>;\n  sendTx?: (\n    chainId: string,\n    tx: Uint8Array,\n    mode: BroadcastMode\n  ) => Promise<Uint8Array>;\n}\n\nexport type WalletAdapter = ChainWalletBase | MainWalletBase;\n\nexport interface IChainWallet {\n  new (walletInfo: Wallet, chainInfo: ChainRecord): ChainWalletBase;\n}\n\nexport type NameServiceName = string;\n\nexport interface NameServiceRegistry {\n  name: NameServiceName;\n  contract: string;\n  chainName: ChainName;\n  getQueryMsg: (address: Bech32Address) => any;\n  slip173: string;\n}\n\nexport interface WalletConnectOptions {\n  signClient: { projectId: string } & SignClientTypes.Options;\n}\n","import { ChainWalletBase } from '../bases';\nimport { WalletRepo } from '../repository';\nimport { Dispatch } from './common';\n\nexport enum ModalView {\n  WalletList = 'WalletList',\n  Connecting = 'Connecting',\n  Connected = 'Connected',\n  Error = 'Error',\n  NotExist = 'NotExist',\n  Rejected = 'Rejected',\n  QRCode = 'QRCode',\n}\n\nexport interface WalletModalProps {\n  isOpen: boolean;\n  setOpen: Dispatch<boolean>;\n  walletRepo?: WalletRepo;\n}\n\nexport interface WalletViewProps {\n  onClose: () => void;\n  onReturn: () => void;\n  wallet: ChainWalletBase;\n}\n\ninterface RefObject<T> {\n  readonly current: T | null;\n}\n\nexport interface WalletListViewProps {\n  onClose: () => void;\n  wallets: ChainWalletBase[];\n  initialFocus?: RefObject<HTMLButtonElement>;\n}\n\ntype SingleWalletView = `${Exclude<ModalView, ModalView.WalletList>}`;\n\nexport type ModalViews = {\n  [p in SingleWalletView]?: (props: WalletViewProps) => JSX.Element;\n} & {\n  WalletList?: (props: WalletListViewProps) => JSX.Element;\n};\n"],"mappings":";AACO,IAAK,QAAL,kBAAKA,WAAL;AACL,EAAAA,OAAA,UAAO;AACP,EAAAA,OAAA,aAAU;AACV,EAAAA,OAAA,UAAO;AACP,EAAAA,OAAA,WAAQ;AAJE,SAAAA;AAAA,GAAA;;;ACoCL,IAAK,eAAL,kBAAKC,kBAAL;AACL,EAAAA,cAAA,kBAAe;AACf,EAAAA,cAAA,gBAAa;AACb,EAAAA,cAAA,eAAY;AACZ,EAAAA,cAAA,cAAW;AACX,EAAAA,cAAA,cAAW;AACX,EAAAA,cAAA,WAAQ;AANE,SAAAA;AAAA,GAAA;AA+GL,IAAM,oBAAoB;AAAA,EAC/B,MAAM;AAAA,EACN,OAAO;AACT;;;ACnJO,IAAK,YAAL,kBAAKC,eAAL;AACL,EAAAA,WAAA,gBAAa;AACb,EAAAA,WAAA,gBAAa;AACb,EAAAA,WAAA,eAAY;AACZ,EAAAA,WAAA,WAAQ;AACR,EAAAA,WAAA,cAAW;AACX,EAAAA,WAAA,cAAW;AACX,EAAAA,WAAA,YAAS;AAPC,SAAAA;AAAA,GAAA;","names":["State","WalletStatus","ModalView"]}